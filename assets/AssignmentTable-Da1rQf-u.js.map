{"version":3,"file":"AssignmentTable-Da1rQf-u.js","sources":["../../src/features/assignments/components/AssignmentTable.tsx"],"sourcesContent":["import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport { Avatar, Chip, Link, List, ListItem } from '@mui/material';\n\n// project imports\nimport DataTable from '@/ui-component/DataTable';\nimport SebraDialog from '@/ui-component/SebraDialog';\nimport { stringAvatar } from '@/utils';\nimport { Assignment } from '@/api/gql/graphql';\nimport { useCreateAssignment, useDeleteAssignment, useUpdateAssignment } from '../hooks/useAssignmentsMutations';\nimport AssignmentForm from './AssignmentForm';\nimport { Contact } from '@/api/gql/graphql';\n\ninterface AssignmentTableProps {\n  assignments: Assignment[];\n  isLoading: boolean;\n  defaultValues?: Partial<Assignment>;\n}\n\nconst AssignmentTable = ({ assignments, isLoading, defaultValues }: AssignmentTableProps) => {\n  const { mutate: createAssignment } = useCreateAssignment();\n  const { mutate: updateAssignment } = useUpdateAssignment();\n  const { mutate: deleteAssignment } = useDeleteAssignment();\n\n  return (\n    <DataTable\n      data={assignments}\n      getRowId={(row) => `${row.id}`}\n      state={{ isLoading }}\n      columns={[\n        {\n          accessorKey: 'assignmentName',\n          header: 'Uppdrag',\n          Cell: ({ cell, row }) => (\n            <Link component={RouterLink} to={`/home/assignments/${row.original.id}`}>\n              {cell.getValue<string>()}\n            </Link>\n          )\n        },\n        {\n          accessorKey: 'responsibleContacts',\n          header: 'Ansvariga',\n          enableEditing: false,\n          Cell: ({ cell }) => (\n            <List disablePadding>\n              {cell.getValue<Contact[]>().map((contact) => (\n                <ListItem key={contact.id} sx={{ py: 0.25 }} disableGutters>\n                  <Chip\n                    component={RouterLink}\n                    variant=\"outlined\"\n                    avatar={<Avatar {...stringAvatar(contact.contactName)} />}\n                    label={contact.contactName}\n                    to={`/home/contacts/${contact.id}`}\n                    clickable\n                    size=\"small\"\n                  />\n                </ListItem>\n              ))}\n            </List>\n          )\n        },\n        {\n          accessorFn: (row) => row.externalContact?.contactName,\n          header: 'Extern',\n          enableEditing: false,\n          Cell: ({ cell, row }) => (\n            <Link component={RouterLink} to={`/home/contacts/${row.original.externalContact?.id}`}>\n              {cell.getValue<string>()}\n            </Link>\n          )\n        },\n        {\n          accessorFn: (row) => row.company?.companyName,\n          header: 'Bolag',\n          enableEditing: false,\n          Cell: ({ cell, row }) => (\n            <Link component={RouterLink} to={`/home/companies/${row.original.company?.id}`}>\n              {cell.getValue<string>()}\n            </Link>\n          )\n        },\n        { accessorKey: 'status', header: 'Status' },\n        {\n          accessorKey: 'fee',\n          header: 'Arvode',\n          Cell: ({ cell }) =>\n            cell.getValue<number>()?.toLocaleString('sv-SE', {\n              style: 'currency',\n              currency: 'SEK',\n              minimumFractionDigits: 0,\n              maximumFractionDigits: 0\n            })\n        }\n      ]}\n      renderEditRowDialogContent={({ row, table }) => (\n        <SebraDialog\n          table={table}\n          row={row}\n          titles={{ creating: 'LÃ¤gg till uppdrag', editing: 'Redigera uppdrag' }}\n          FormComponent={AssignmentForm}\n          defaultValues={defaultValues}\n        />\n      )}\n      onCreate={(row) => createAssignment(row)}\n      onUpdate={(row) => updateAssignment(row)}\n      onDelete={(row) => deleteAssignment(row)}\n    />\n  );\n};\n\nexport default AssignmentTable;\n"],"names":["AssignmentTable","assignments","isLoading","defaultValues","createAssignment","useCreateAssignment","updateAssignment","useUpdateAssignment","deleteAssignment","useDeleteAssignment","jsx","DataTable","row","cell","Link","RouterLink","List","contact","ListItem","Chip","Avatar","stringAvatar","_a","table","SebraDialog","AssignmentForm"],"mappings":"2lBAoBA,MAAMA,EAAkB,CAAC,CAAE,YAAAC,EAAa,UAAAC,EAAW,cAAAC,KAA0C,CAC3F,KAAM,CAAE,OAAQC,CAAiB,EAAIC,EAAoB,EACnD,CAAE,OAAQC,CAAiB,EAAIC,EAAoB,EACnD,CAAE,OAAQC,CAAiB,EAAIC,EAAoB,EAGvD,OAAAC,EAAA,IAACC,EAAA,CACC,KAAMV,EACN,SAAWW,GAAQ,GAAGA,EAAI,EAAE,GAC5B,MAAO,CAAE,UAAAV,CAAU,EACnB,QAAS,CACP,CACE,YAAa,iBACb,OAAQ,UACR,KAAM,CAAC,CAAE,KAAAW,EAAM,IAAAD,CAAI,UAChBE,EAAK,CAAA,UAAWC,EAAY,GAAI,qBAAqBH,EAAI,SAAS,EAAE,GAClE,SAAAC,EAAK,WACR,CAEJ,EACA,CACE,YAAa,sBACb,OAAQ,YACR,cAAe,GACf,KAAM,CAAC,CAAE,KAAAA,KACNH,MAAAM,EAAA,CAAK,eAAc,GACjB,SAAKH,EAAA,WAAsB,IAAKI,GAC/BP,EAAAA,IAACQ,EAA0B,CAAA,GAAI,CAAE,GAAI,KAAQ,eAAc,GACzD,SAAAR,EAAA,IAACS,EAAA,CACC,UAAWJ,EACX,QAAQ,WACR,OAASL,EAAA,IAAAU,EAAA,CAAQ,GAAGC,EAAaJ,EAAQ,WAAW,EAAG,EACvD,MAAOA,EAAQ,YACf,GAAI,kBAAkBA,EAAQ,EAAE,GAChC,UAAS,GACT,KAAK,OAAA,CARM,CAAA,EAAAA,EAAQ,EAUvB,CACD,EACH,CAEJ,EACA,CACE,WAAaL,UAAQ,OAAAU,EAAAV,EAAI,kBAAJ,YAAAU,EAAqB,aAC1C,OAAQ,SACR,cAAe,GACf,KAAM,CAAC,CAAE,KAAAT,EAAM,IAAAD,CAAI,IAAA,oBAChBE,EAAK,CAAA,UAAWC,EAAY,GAAI,mBAAkBO,EAAAV,EAAI,SAAS,kBAAb,YAAAU,EAA8B,EAAE,GAChF,SAAAT,EAAK,WACR,EAEJ,EACA,CACE,WAAaD,UAAQ,OAAAU,EAAAV,EAAI,UAAJ,YAAAU,EAAa,aAClC,OAAQ,QACR,cAAe,GACf,KAAM,CAAC,CAAE,KAAAT,EAAM,IAAAD,CAAI,IAAA,oBAChBE,EAAK,CAAA,UAAWC,EAAY,GAAI,oBAAmBO,EAAAV,EAAI,SAAS,UAAb,YAAAU,EAAsB,EAAE,GACzE,SAAAT,EAAK,WACR,EAEJ,EACA,CAAE,YAAa,SAAU,OAAQ,QAAS,EAC1C,CACE,YAAa,MACb,OAAQ,SACR,KAAM,CAAC,CAAE,KAAAA,YACP,OAAAS,EAAAT,EAAK,SAAoB,IAAzB,YAAAS,EAAyB,eAAe,QAAS,CAC/C,MAAO,WACP,SAAU,MACV,sBAAuB,EACvB,sBAAuB,CAAA,GAE7B,CACF,EACA,2BAA4B,CAAC,CAAE,IAAAV,EAAK,MAAAW,CAClC,IAAAb,EAAA,IAACc,EAAA,CACC,MAAAD,EACA,IAAAX,EACA,OAAQ,CAAE,SAAU,oBAAqB,QAAS,kBAAmB,EACrE,cAAea,EACf,cAAAtB,CAAA,CACF,EAEF,SAAWS,GAAQR,EAAiBQ,CAAG,EACvC,SAAWA,GAAQN,EAAiBM,CAAG,EACvC,SAAWA,GAAQJ,EAAiBI,CAAG,CAAA,CAAA,CAG7C"}