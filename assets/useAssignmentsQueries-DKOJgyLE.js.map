{"version":3,"file":"useAssignmentsQueries-DKOJgyLE.js","sources":["../../src/features/assignments/api/assignmentsGQL.ts","../../src/features/assignments/api/assignmentsLocal.ts","../../src/features/assignments/hooks/useAssignmentsQueries.ts"],"sourcesContent":["import { graphql } from '@/api/gql';\nimport {\n  Assignment,\n  CreateAssignmentMutation,\n  DeleteAssignmentMutation,\n  GetAssignmentQuery,\n  GetAssignmentQueryVariables,\n  GetAssignmentsQuery,\n  UpdateAssignmentMutation\n} from '@/api/gql/graphql';\nimport { requestGQL } from '@/hooks/useGraphQL';\nimport { pick } from '@/utils';\n\nexport const getAssignmentsGQL = (): Promise<GetAssignmentsQuery> =>\n  requestGQL(\n    graphql(`\n      query GetAssignments {\n        Assignments(sort: \"assignmentName\") {\n          docs {\n            id\n            assignmentName\n            fee\n            status\n            type\n            createdAt\n            updatedAt\n\n            company {\n              id\n              companyName\n              address\n              industry\n              phone\n              email\n              website\n              organizationNumber\n              createdAt\n              updatedAt\n            }\n\n            externalContact {\n              id\n              contactName\n              email\n              phone\n              jobTitle\n              address\n              notes\n              createdAt\n              updatedAt\n            }\n\n            responsibleContacts {\n              id\n              contactName\n              email\n              phone\n              jobTitle\n              address\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n    `)\n  )();\n\nexport const getAssignmentGQL = (data: GetAssignmentQueryVariables): Promise<GetAssignmentQuery> =>\n  requestGQL(\n    graphql(`\n      query GetAssignment($id: String!) {\n        Assignment(id: $id) {\n          id\n          assignmentName\n          fee\n          status\n          type\n          createdAt\n          updatedAt\n\n          company {\n            id\n            companyName\n            address\n            industry\n            phone\n            email\n            website\n            organizationNumber\n            createdAt\n            updatedAt\n          }\n\n          externalContact {\n            id\n            contactName\n            email\n            phone\n            jobTitle\n            address\n            notes\n            createdAt\n            updatedAt\n          }\n\n          responsibleContacts {\n            id\n            contactName\n            email\n            phone\n            jobTitle\n            address\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    `)\n  )({ id: data.id });\n\nexport const createAssignmentGQL = (data: Assignment): Promise<CreateAssignmentMutation> =>\n  requestGQL(\n    graphql(`\n      mutation CreateAssignment($data: mutationAssignmentInput!) {\n        createAssignment(data: $data) {\n          id\n        }\n      }\n    `)\n  )({\n    data: pick(\n      {\n        ...data,\n        externalContact: data.externalContact?.id,\n        company: data.company?.id,\n        responsibleContacts: (data.responsibleContacts || []).map((c) => c.id)\n      },\n      ['assignmentName', 'fee', 'status', 'type', 'externalContact', 'company', 'responsibleContacts']\n    )\n  });\n\nexport const updateAssignmentGQL = ({ id, ...data }: Assignment): Promise<UpdateAssignmentMutation> =>\n  requestGQL(\n    graphql(`\n      mutation UpdateAssignment($id: String!, $data: mutationAssignmentUpdateInput!) {\n        updateAssignment(id: $id, data: $data) {\n          id\n        }\n      }\n    `)\n  )({\n    id,\n    data: pick(\n      {\n        ...data,\n        externalContact: data.externalContact?.id,\n        company: data.company?.id,\n        responsibleContacts: (data.responsibleContacts || []).map((c) => c.id)\n      },\n      ['assignmentName', 'fee', 'status', 'type', 'externalContact', 'company', 'responsibleContacts']\n    )\n  });\n\nexport const deleteAssignmentGQL = ({ id }: Assignment): Promise<DeleteAssignmentMutation> =>\n  requestGQL(\n    graphql(`\n      mutation DeleteAssignment($id: String!) {\n        deleteAssignment(id: $id) {\n          id\n        }\n      }\n    `)\n  )({ id });\n","import { v4 as uuidv4 } from 'uuid';\n\nimport {\n  deleteQuery,\n  insertManyQuery,\n  insertQuery,\n  query,\n  selectAllQuery,\n  selectOneQuery,\n  updateQuery\n} from '@/api/DummyDB';\nimport { AssertKeys, groupBy, pick, toMap } from '@/utils';\nimport {\n  Assignment,\n  Company,\n  Contact,\n  CreateAssignmentMutation,\n  DeleteAssignmentMutation,\n  GetAssignmentQuery,\n  GetAssignmentQueryVariables,\n  GetAssignmentsQuery,\n  UpdateAssignmentMutation\n} from '@/api/gql/graphql';\n\ntype LocalAssignment = {\n  id: string;\n  assignmentName: string;\n  externalContact: Contact;\n  responsibleContacts?: Contact[];\n  company?: Company;\n  fee: number;\n  type: string;\n  status: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\ntype ResponsibleContact = {\n  assignmentId: string;\n  contactId: string;\n};\n\nexport const verify: AssertKeys<LocalAssignment, Omit<Assignment, '__typename'>> = true;\n\ntype FlatAssignment = Omit<Assignment, 'externalContact' | 'company' | 'responsibleContacts'> & {\n  externalContact: string;\n  company?: string;\n};\n\nexport const getAssignmentsLocal = async (): Promise<GetAssignmentsQuery> => {\n  const [assignments, responsibleContacts, contacts, companies] = await Promise.all([\n    query<FlatAssignment>(`SELECT * FROM assignments ORDER BY assignment_name`),\n    query<ResponsibleContact>(`SELECT * FROM assignment_responsible_contacts`),\n    query<Contact>(`SELECT * FROM contacts`),\n    query<Company>(`SELECT * FROM companies`)\n  ]);\n\n  const responsibleContactsMap = groupBy(responsibleContacts, 'assignmentId');\n  const contactsMap = toMap(contacts, 'id');\n  const companiesMap = toMap(companies, 'id');\n  const docs = assignments.map(transformFlatAssignment(responsibleContactsMap, contactsMap, companiesMap));\n\n  return { Assignments: { docs } };\n};\n\nexport const getAssignmentLocal = async ({ id }: GetAssignmentQueryVariables): Promise<GetAssignmentQuery> => {\n  const [assignment, responsibleContacts, contacts, companies] = await Promise.all([\n    selectOneQuery<FlatAssignment>('assignments', { id }),\n    selectAllQuery<ResponsibleContact>('assignment_responsible_contacts', { assignmentId: id }),\n    query<Contact>(`SELECT * FROM contacts`),\n    query<Company>(`SELECT * FROM companies`)\n  ]);\n\n  const responsibleContactsMap = groupBy(responsibleContacts, 'assignmentId');\n  const contactsMap = toMap(contacts, 'id');\n  const companiesMap = toMap(companies, 'id');\n\n  return { Assignment: transformFlatAssignment(responsibleContactsMap, contactsMap, companiesMap)(assignment) };\n};\n\nexport const createAssignmentLocal = async (data: Assignment): Promise<CreateAssignmentMutation> => {\n  const params = pick({ ...data, id: uuidv4(), externalContact: data.externalContact?.id, company: data.company?.id }, [\n    'id',\n    'assignmentName',\n    'externalContact',\n    'company',\n    'fee',\n    'type',\n    'status'\n  ]);\n\n  const assignment = await insertQuery<FlatAssignment>('assignments', params);\n  await createAssignmentResponsibleContacts({ ...data, id: assignment.id });\n  return { createAssignment: assignment };\n};\n\nexport const updateAssignmentLocal = async (data: Assignment): Promise<UpdateAssignmentMutation> => {\n  const params = pick({ ...data, externalContact: data.externalContact?.id, company: data.company?.id }, [\n    'assignmentName',\n    'externalContact',\n    'company',\n    'fee',\n    'type',\n    'status'\n  ]);\n  const assignment = await updateQuery<FlatAssignment>('assignments', params, pick(data, ['id']));\n  await updateAssignmentResponsibleContacts(data);\n  return { updateAssignment: assignment };\n};\n\nexport const deleteAssignmentLocal = async ({ id }: Pick<Assignment, 'id'>): Promise<DeleteAssignmentMutation> => {\n  await deleteQuery<FlatAssignment>('assignments', { id });\n  await deleteAssignmentResponsibleContacts({ id });\n  return { deleteAssignment: { id } };\n};\n\nfunction transformFlatAssignment(\n  responsibleContactsMap: Map<string, ResponsibleContact[]>,\n  contactsMap: Map<string, Contact>,\n  companiesMap: Map<string, Company>\n): (value: FlatAssignment) => Assignment {\n  return (assignment: FlatAssignment) => {\n    const responsibleContactsList = responsibleContactsMap.get(assignment.id) || [];\n    const responsibleContactIds = responsibleContactsList.map((c) => c.contactId);\n    const responsibleContacts = responsibleContactIds.map((contactId) => contactsMap.get(contactId)).filter((c) => !!c);\n    const externalContact = contactsMap.get(assignment.externalContact);\n    const company = companiesMap.get(assignment.company || '');\n\n    return { ...assignment, responsibleContacts, externalContact, company };\n  };\n}\n\n// Logic for responsible contacts\nconst createAssignmentResponsibleContacts = async ({ id: assignmentId, responsibleContacts }: Partial<Assignment>) => {\n  if (!assignmentId || !responsibleContacts) return;\n\n  await insertManyQuery<ResponsibleContact>(\n    'assignment_responsible_contacts',\n    responsibleContacts.map(({ id: contactId }) => ({ assignmentId: assignmentId, contactId }))\n  );\n};\n\nconst updateAssignmentResponsibleContacts = async (assignment: Partial<Assignment>) => {\n  await deleteAssignmentResponsibleContacts(assignment);\n  await createAssignmentResponsibleContacts(assignment);\n};\n\nconst deleteAssignmentResponsibleContacts = async ({ id }: Partial<Assignment>) => {\n  if (!id) return;\n  await deleteQuery<ResponsibleContact>('assignment_responsible_contacts', { assignmentId: id });\n};\n","import { useQuery } from '@tanstack/react-query';\n\nimport { useAppStore } from '@/store';\nimport { getAssignmentGQL, getAssignmentsGQL } from '../api/assignmentsGQL';\nimport { getAssignmentLocal, getAssignmentsLocal } from '../api/assignmentsLocal';\n\nexport const useAssignments = () => {\n  const [{ isDemo }] = useAppStore();\n  const fn = isDemo ? getAssignmentsLocal : getAssignmentsGQL;\n  return useQuery({\n    queryKey: ['assignments'],\n    queryFn: () => fn(),\n    select: (data) => data.Assignments?.docs?.filter((i) => !!i) || []\n  });\n};\n\nexport const useAssignment = (assignmentId: string | undefined) => {\n  const [{ isDemo }] = useAppStore();\n  const fn = isDemo ? getAssignmentLocal : getAssignmentGQL;\n\n  return useQuery({\n    queryKey: ['assignment', assignmentId],\n    queryFn: () => fn({ id: assignmentId! }),\n    select: (data) => data.Assignment!,\n    enabled: !!assignmentId\n  });\n};\n"],"names":["getAssignmentsGQL","requestGQL","graphql","getAssignmentGQL","data","createAssignmentGQL","pick","_a","_b","c","updateAssignmentGQL","id","deleteAssignmentGQL","getAssignmentsLocal","assignments","responsibleContacts","contacts","companies","query","responsibleContactsMap","groupBy","contactsMap","toMap","companiesMap","transformFlatAssignment","getAssignmentLocal","assignment","selectOneQuery","selectAllQuery","createAssignmentLocal","params","uuidv4","insertQuery","createAssignmentResponsibleContacts","updateAssignmentLocal","updateQuery","updateAssignmentResponsibleContacts","deleteAssignmentLocal","deleteQuery","deleteAssignmentResponsibleContacts","contactId","externalContact","company","assignmentId","insertManyQuery","useAssignments","isDemo","useAppStore","fn","useQuery","useAssignment"],"mappings":"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"}