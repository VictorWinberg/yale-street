{"version":3,"file":"useAssignmentsMutations-BOqk_WLL.js","sources":["../../src/features/assignments/components/AssignmentForm.tsx","../../src/features/assignments/hooks/useAssignmentsMutations.ts"],"sourcesContent":["import { useMemo } from 'react';\n\n// material-ui\nimport { Autocomplete, Chip, Grid, TextField } from '@mui/material';\n\n// third party\nimport { Controller, useForm } from 'react-hook-form';\n\n// project imports\nimport { useCompanies } from '@/features/companies/hooks/useCompaniesQueries';\nimport { useContacts } from '@/features/contacts/hooks/useContactsQueries';\nimport SebraForm, { FormProps } from '@/ui-component/SebraForm';\nimport { Assignment } from '@/api/gql/graphql';\nimport { useAssignments } from '../hooks/useAssignmentsQueries';\n\n// ==============================|| ASSIGNMENT FORM ||============================== //\n\nconst AssignmentForm = ({ formProps, ...props }: FormProps<Assignment>) => {\n  const { data: assignments = [] } = useAssignments();\n  const { data: contacts = [] } = useContacts();\n  const { data: companies = [] } = useCompanies();\n  const {\n    register,\n    control,\n    formState: { errors },\n    handleSubmit\n  } = useForm<Assignment>(formProps);\n\n  const assignmentStatuses = useMemo(\n    () => [...new Set(assignments.map((assignment) => assignment.status))],\n    [assignments]\n  );\n\n  return (\n    <SebraForm {...props} handleSubmit={handleSubmit}>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <TextField\n            fullWidth\n            label=\"Uppdragsnamn\"\n            type=\"text\"\n            margin=\"none\"\n            {...register('assignmentName', { required: true })}\n            error={!!errors.assignmentName}\n          />\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <Controller\n            name=\"status\"\n            control={control}\n            render={({ field }) => (\n              <Autocomplete\n                freeSolo\n                options={assignmentStatuses}\n                value={assignmentStatuses.find((status) => status === field.value) || null}\n                onChange={(_, value) => field.onChange(value ?? '')}\n                renderInput={(params) => <TextField {...params} label=\"Status\" variant=\"outlined\" fullWidth />}\n              />\n            )}\n          />\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <TextField fullWidth label=\"Typ\" margin=\"none\" type=\"text\" {...register('type')} />\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <TextField\n            fullWidth\n            label=\"Arvode\"\n            margin=\"none\"\n            type=\"number\"\n            {...register('fee', { valueAsNumber: true })}\n            InputProps={{ endAdornment: 'SEK' }}\n          />\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <Controller\n            name=\"responsibleContacts\"\n            control={control}\n            render={({ field }) => (\n              <Autocomplete\n                multiple\n                limitTags={2}\n                disableCloseOnSelect\n                id=\"multiple-contacts\"\n                options={contacts}\n                getOptionKey={(option) => option.id}\n                getOptionLabel={(option) => option.contactName}\n                isOptionEqualToValue={(option, value) => option.id === value.id}\n                value={field.value || []}\n                onChange={(_, value) => field.onChange(value)}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Ansvariga kontakter\"\n                    variant=\"outlined\"\n                    fullWidth\n                    error={!!errors.responsibleContacts}\n                  />\n                )}\n                renderTags={(tags, getTagProps) => {\n                  return tags.map((option, index) => (\n                    <Chip {...getTagProps({ index })} key={option.id} label={option.contactName} />\n                  ));\n                }}\n              />\n            )}\n          />\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <Controller\n            name=\"externalContact\"\n            control={control}\n            render={({ field }) => (\n              <Autocomplete\n                options={contacts}\n                getOptionKey={(option) => option.id}\n                getOptionLabel={(option) => option.contactName}\n                value={contacts.find((contact) => contact.id === field.value?.id) || null}\n                onChange={(_, value) => field.onChange(value ?? undefined)}\n                renderInput={(params) => <TextField {...params} label=\"Extern kontakt\" variant=\"outlined\" fullWidth />}\n              />\n            )}\n          />\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <Controller\n            name=\"company\"\n            control={control}\n            render={({ field }) => (\n              <Autocomplete\n                options={companies}\n                getOptionKey={(option) => option.id}\n                getOptionLabel={(option) => option.companyName}\n                value={companies.find((company) => company.id === field.value?.id) || null}\n                onChange={(_, value) => field.onChange(value ?? undefined)}\n                renderInput={(params) => <TextField {...params} label=\"Bolag\" variant=\"outlined\" fullWidth />}\n              />\n            )}\n          />\n        </Grid>\n      </Grid>\n    </SebraForm>\n  );\n};\n\nexport default AssignmentForm;\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\n\nimport { useSnackbar } from '@/hooks/useSnackbar';\nimport { useAppStore } from '@/store';\nimport { createAssignmentGQL, deleteAssignmentGQL, updateAssignmentGQL } from '../api/assignmentsGQL';\nimport { createAssignmentLocal, deleteAssignmentLocal, updateAssignmentLocal } from '../api/assignmentsLocal';\n\nexport const useCreateAssignment = () => {\n  const [{ isDemo }] = useAppStore();\n  const queryClient = useQueryClient();\n  const { showSnackbar } = useSnackbar();\n\n  return useMutation({\n    mutationFn: isDemo ? createAssignmentLocal : createAssignmentGQL,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['assignments'] });\n      showSnackbar('Uppdrag skapat!');\n    },\n    onError: () => {\n      showSnackbar('Ett fel uppstod när uppgiften skulle skapas.', 'error');\n    }\n  });\n};\n\nexport const useUpdateAssignment = () => {\n  const [{ isDemo }] = useAppStore();\n  const queryClient = useQueryClient();\n  const { showSnackbar } = useSnackbar();\n\n  return useMutation({\n    mutationFn: isDemo ? updateAssignmentLocal : updateAssignmentGQL,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['assignments'] });\n      showSnackbar('Uppdrag uppdaterat!');\n    },\n    onError: () => {\n      showSnackbar('Ett fel uppstod när uppgiften skulle uppdateras.', 'error');\n    }\n  });\n};\n\nexport const useDeleteAssignment = () => {\n  const [{ isDemo }] = useAppStore();\n  const queryClient = useQueryClient();\n  const { showSnackbar } = useSnackbar();\n\n  return useMutation({\n    mutationFn: isDemo ? deleteAssignmentLocal : deleteAssignmentGQL,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['assignments'] });\n      showSnackbar('Uppdrag borttaget!');\n    },\n    onError: () => {\n      showSnackbar('Ett fel uppstod när uppgiften skulle tas bort.', 'error');\n    }\n  });\n};\n"],"names":["AssignmentForm","formProps","props","assignments","useAssignments","contacts","useContacts","companies","useCompanies","register","control","errors","handleSubmit","useForm","assignmentStatuses","useMemo","assignment","jsx","SebraForm","Grid","TextField","Controller","field","Autocomplete","status","_","value","params","option","tags","getTagProps","index","createElement","Chip","contact","_a","company","useCreateAssignment","isDemo","useAppStore","queryClient","useQueryClient","showSnackbar","useSnackbar","useMutation","createAssignmentLocal","createAssignmentGQL","useUpdateAssignment","updateAssignmentLocal","updateAssignmentGQL","useDeleteAssignment","deleteAssignmentLocal","deleteAssignmentGQL"],"mappings":"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"}