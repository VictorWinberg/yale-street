{"version":3,"file":"useContactsMutations-Docl9ZxR.js","sources":["../../src/features/contacts/components/ContactForm.tsx","../../src/features/contacts/hooks/useContactsMutations.ts"],"sourcesContent":["// material-ui\nimport { Autocomplete, Grid, TextField } from '@mui/material';\n\n// third party\nimport { Controller, useForm } from 'react-hook-form';\n\n// project imports\nimport { Contact } from '@/api/gql/graphql';\nimport { useCompanies } from '@/features/companies/hooks/useCompaniesQueries';\nimport SebraForm, { FormProps } from '@/ui-component/SebraForm';\n\n// ==============================|| CONTACT FORM ||============================== //\n\nconst ContactForm = ({ formProps, ...props }: FormProps<Contact>) => {\n  const { data: companies = [] } = useCompanies();\n  const {\n    register,\n    control,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<Contact>(formProps);\n\n  return (\n    <SebraForm {...props} handleSubmit={handleSubmit}>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <TextField\n            fullWidth\n            label=\"Namn\"\n            type=\"text\"\n            margin=\"none\"\n            {...register('contactName', { required: true })}\n            error={!!errors.contactName}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            fullWidth\n            label=\"Email\"\n            type=\"email\"\n            margin=\"none\"\n            {...register('email', { required: true })}\n            error={!!errors.email}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField fullWidth label=\"Telefonnummer\" type=\"text\" margin=\"none\" {...register('phone')} />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Controller\n            name=\"company\"\n            control={control}\n            render={({ field }) => (\n              <Autocomplete\n                options={companies}\n                getOptionKey={(option) => option.id}\n                getOptionLabel={(option) => option.companyName}\n                value={companies.find((company) => company.id === field.value?.id) || null}\n                onChange={(_, value) => field.onChange(value ?? undefined)}\n                renderInput={(params) => <TextField {...params} label=\"Bolag\" variant=\"outlined\" fullWidth />}\n              />\n            )}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField fullWidth label=\"Befattning\" type=\"text\" margin=\"none\" {...register('jobTitle')} />\n        </Grid>\n      </Grid>\n    </SebraForm>\n  );\n};\n\nexport default ContactForm;\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\n\nimport { useAppStore } from '@/store';\nimport { useSnackbar } from '@/hooks/useSnackbar';\nimport { createContactGQL, deleteContactGQL, updateContactGQL } from '../api/contactsGQL';\nimport { createContactLocal, deleteContactLocal, updateContactLocal } from '../api/contactsLocal';\n\nexport const useCreateContact = () => {\n  const [{ isDemo }] = useAppStore();\n  const queryClient = useQueryClient();\n  const { showSnackbar } = useSnackbar();\n\n  return useMutation({\n    mutationFn: isDemo ? createContactLocal : createContactGQL,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['contacts'] });\n      showSnackbar('Kontakt skapat!');\n    },\n    onError: () => {\n      showSnackbar('Ett fel uppstod när kontakten skulle skapas.', 'error');\n    }\n  });\n};\n\nexport const useUpdateContact = () => {\n  const [{ isDemo }] = useAppStore();\n  const queryClient = useQueryClient();\n  const { showSnackbar } = useSnackbar();\n\n  return useMutation({\n    mutationFn: isDemo ? updateContactLocal : updateContactGQL,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['contacts'] });\n      showSnackbar('Kontakt uppdaterat!');\n    },\n    onError: () => {\n      showSnackbar('Ett fel uppstod när kontakten skulle uppdateras.', 'error');\n    }\n  });\n};\n\nexport const useDeleteContact = () => {\n  const [{ isDemo }] = useAppStore();\n  const queryClient = useQueryClient();\n  const { showSnackbar } = useSnackbar();\n\n  return useMutation({\n    mutationFn: isDemo ? deleteContactLocal : deleteContactGQL,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['contacts'] });\n      showSnackbar('Kontakt borttaget!');\n    },\n    onError: () => {\n      showSnackbar('Ett fel uppstod när kontakten skulle tas bort.', 'error');\n    }\n  });\n};\n"],"names":["ContactForm","formProps","props","companies","useCompanies","register","control","handleSubmit","errors","useForm","jsx","SebraForm","Grid","TextField","Controller","field","Autocomplete","option","company","_a","_","value","params","useCreateContact","isDemo","useAppStore","queryClient","useQueryClient","showSnackbar","useSnackbar","useMutation","createContactLocal","createContactGQL","useUpdateContact","updateContactLocal","updateContactGQL","useDeleteContact","deleteContactLocal","deleteContactGQL"],"mappings":"0nBAaA,MAAMA,EAAc,CAAC,CAAE,UAAAC,EAAW,GAAGC,KAAgC,CACnE,KAAM,CAAE,KAAMC,EAAY,CAAA,GAAOC,EAAa,EACxC,CACJ,SAAAC,EACA,QAAAC,EACA,aAAAC,EACA,UAAW,CAAE,OAAAC,CAAO,CAAA,EAClBC,EAAiBR,CAAS,EAG5B,OAAAS,EAAA,IAACC,EAAW,CAAA,GAAGT,EAAO,aAAAK,EACpB,gBAACK,EAAK,CAAA,UAAS,GAAC,QAAS,EACvB,SAAA,CAAAF,EAAA,IAACE,EAAK,CAAA,KAAI,GAAC,GAAI,GACb,SAAAF,EAAA,IAACG,EAAA,CACC,UAAS,GACT,MAAM,OACN,KAAK,OACL,OAAO,OACN,GAAGR,EAAS,cAAe,CAAE,SAAU,GAAM,EAC9C,MAAO,CAAC,CAACG,EAAO,WAAA,CAAA,EAEpB,QACCI,EAAK,CAAA,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAF,EAAA,IAACG,EAAA,CACC,UAAS,GACT,MAAM,QACN,KAAK,QACL,OAAO,OACN,GAAGR,EAAS,QAAS,CAAE,SAAU,GAAM,EACxC,MAAO,CAAC,CAACG,EAAO,KAAA,CAAA,EAEpB,EACAE,EAAAA,IAACE,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAF,EAAAA,IAACG,EAAU,CAAA,UAAS,GAAC,MAAM,gBAAgB,KAAK,OAAO,OAAO,OAAQ,GAAGR,EAAS,OAAO,CAAA,CAAG,CAC9F,CAAA,QACCO,EAAK,CAAA,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAF,EAAA,IAACI,EAAA,CACC,KAAK,UACL,QAAAR,EACA,OAAQ,CAAC,CAAE,MAAAS,CAAA,IACTL,EAAA,IAACM,EAAA,CACC,QAASb,EACT,aAAec,GAAWA,EAAO,GACjC,eAAiBA,GAAWA,EAAO,YACnC,MAAOd,EAAU,KAAMe,GAAY,OAAA,OAAAA,EAAQ,OAAOC,EAAAJ,EAAM,QAAN,YAAAI,EAAa,IAAE,GAAK,KACtE,SAAU,CAACC,EAAGC,IAAUN,EAAM,SAASM,GAAS,MAAS,EACzD,YAAcC,GAAWZ,MAACG,EAAW,CAAA,GAAGS,EAAQ,MAAM,QAAQ,QAAQ,WAAW,UAAS,EAAC,CAAA,CAAA,CAC7F,CAAA,CAAA,EAGN,EACAZ,EAAAA,IAACE,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAF,EAAAA,IAACG,EAAU,CAAA,UAAS,GAAC,MAAM,aAAa,KAAK,OAAO,OAAO,OAAQ,GAAGR,EAAS,UAAU,CAAA,CAAG,CAC9F,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,EC/DakB,EAAmB,IAAM,CACpC,KAAM,CAAC,CAAE,OAAAC,EAAQ,EAAIC,EAAY,EAC3BC,EAAcC,IACd,CAAE,aAAAC,GAAiBC,IAEzB,OAAOC,EAAY,CACjB,WAAYN,EAASO,EAAqBC,EAC1C,UAAW,IAAM,CACfN,EAAY,kBAAkB,CAAE,SAAU,CAAC,UAAU,CAAG,CAAA,EACxDE,EAAa,iBAAiB,CAChC,EACA,QAAS,IAAM,CACbA,EAAa,+CAAgD,OAAO,CACtE,CAAA,CACD,CACH,EAEaK,EAAmB,IAAM,CACpC,KAAM,CAAC,CAAE,OAAAT,EAAQ,EAAIC,EAAY,EAC3BC,EAAcC,IACd,CAAE,aAAAC,GAAiBC,IAEzB,OAAOC,EAAY,CACjB,WAAYN,EAASU,EAAqBC,EAC1C,UAAW,IAAM,CACfT,EAAY,kBAAkB,CAAE,SAAU,CAAC,UAAU,CAAG,CAAA,EACxDE,EAAa,qBAAqB,CACpC,EACA,QAAS,IAAM,CACbA,EAAa,mDAAoD,OAAO,CAC1E,CAAA,CACD,CACH,EAEaQ,EAAmB,IAAM,CACpC,KAAM,CAAC,CAAE,OAAAZ,EAAQ,EAAIC,EAAY,EAC3BC,EAAcC,IACd,CAAE,aAAAC,GAAiBC,IAEzB,OAAOC,EAAY,CACjB,WAAYN,EAASa,EAAqBC,EAC1C,UAAW,IAAM,CACfZ,EAAY,kBAAkB,CAAE,SAAU,CAAC,UAAU,CAAG,CAAA,EACxDE,EAAa,oBAAoB,CACnC,EACA,QAAS,IAAM,CACbA,EAAa,iDAAkD,OAAO,CACxE,CAAA,CACD,CACH"}