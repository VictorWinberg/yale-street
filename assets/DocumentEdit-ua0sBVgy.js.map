{"version":3,"file":"DocumentEdit-ua0sBVgy.js","sources":["../../src/features/documents/components/DocumentReferenceForm.tsx","../../src/features/documents/components/DocumentEdit.tsx"],"sourcesContent":["import { useMemo } from 'react';\n\n// material-ui\nimport { Autocomplete, FormControl, Grid, InputLabel, MenuItem, Select, TextField } from '@mui/material';\n\n// third party\nimport { Controller, useForm } from 'react-hook-form';\n\n// project imports\nimport { DocumentReference } from '@/api/gql/graphql';\nimport { useAssignments } from '@/features/assignments/hooks/useAssignmentsQueries';\nimport { useCompanies } from '@/features/companies/hooks/useCompaniesQueries';\nimport { useContacts } from '@/features/contacts/hooks/useContactsQueries';\nimport SebraForm, { FormProps } from '@/ui-component/SebraForm';\n\nconst ENTITY_TYPES = [\n  { label: 'Bolag', value: 'company' },\n  { label: 'Kontakt', value: 'contact' },\n  { label: 'Uppdrag', value: 'assignment' }\n];\n\n// ==============================|| DOCUMENT FORM ||============================== //\n\nconst DocumentReferenceForm = ({ formProps, ...props }: FormProps<DocumentReference>) => {\n  const { data: contacts = [] } = useContacts();\n  const { data: assignments = [] } = useAssignments();\n  const { data: companies = [] } = useCompanies();\n\n  const {\n    control,\n    handleSubmit,\n    watch,\n    formState: { errors }\n  } = useForm<DocumentReference>(formProps);\n\n  const fields = watch();\n\n  const entityOptions = useMemo(() => {\n    switch (fields.entityType) {\n      case 'company':\n        return companies.map((company) => ({ id: company.id, label: company.companyName }));\n      case 'contact':\n        return contacts.map((contact) => ({ id: contact.id, label: contact.contactName }));\n      case 'assignment':\n        return assignments.map((assignment) => ({\n          id: assignment.id,\n          label: assignment.assignmentName\n        }));\n      default:\n        return [];\n    }\n  }, [fields.entityType, companies, contacts, assignments]);\n\n  return (\n    <SebraForm {...props} handleSubmit={handleSubmit}>\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={6}>\n          <FormControl fullWidth variant=\"outlined\" error={!!errors.entityType}>\n            <InputLabel>Typ</InputLabel>\n            <Controller\n              control={control}\n              name=\"entityType\"\n              defaultValue=\"\"\n              rules={{ required: true }}\n              render={({ field }) => (\n                <Select label=\"Typ\" {...field}>\n                  <MenuItem value=\"\" disabled>\n                    V채lj typ\n                  </MenuItem>\n                  {ENTITY_TYPES.map((type) => (\n                    <MenuItem key={type.value} value={type.value}>\n                      {type.label}\n                    </MenuItem>\n                  ))}\n                </Select>\n              )}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Controller\n            name=\"entityId\"\n            control={control}\n            rules={{ required: true }}\n            render={({ field }) => (\n              <Autocomplete\n                options={entityOptions}\n                getOptionKey={(option) => option.id}\n                getOptionLabel={(option) => option.label}\n                value={entityOptions.find((entity) => entity.id === field.value) || null}\n                onChange={(_, value) => field.onChange(value ? value.id : undefined)}\n                renderInput={(params) => <TextField {...params} label=\"L채nk\" variant=\"outlined\" fullWidth />}\n              />\n            )}\n          />\n        </Grid>\n      </Grid>\n    </SebraForm>\n  );\n};\n\nexport default DocumentReferenceForm;\n","import { useMemo } from 'react';\nimport { Link as RouterLink, createSearchParams, useNavigate, useParams } from 'react-router-dom';\n\n// material-ui\nimport { Box, Link, Typography } from '@mui/material';\n\n// project imports\nimport { Media } from '@/api/gql/graphql';\nimport { useAssignments } from '@/features/assignments/hooks/useAssignmentsQueries';\nimport { useCompanies } from '@/features/companies/hooks/useCompaniesQueries';\nimport { useContacts } from '@/features/contacts/hooks/useContactsQueries';\nimport ContentTabs from '@/ui-component/ContentTabs';\nimport DataTable from '@/ui-component/DataTable';\nimport FlexGrow from '@/ui-component/extended/FlexGrow';\nimport SebraDialog from '@/ui-component/SebraDialog';\nimport { FormActionButtons } from '@/ui-component/SebraForm';\nimport { toMap } from '@/utils';\nimport {\n  useCreateDocumentReference,\n  useDeleteDocument,\n  useDeleteDocumentReference,\n  useSaveDocument,\n  useUpdateDocument,\n  useUpdateDocumentReference\n} from '../hooks/useDocumentsMutations';\nimport { useDocument, useDocumentReferences } from '../hooks/useDocumentsQueries';\nimport DocumentForm from './DocumentForm';\nimport DocumentReferenceForm from './DocumentReferenceForm';\n\n// ==============================|| DOCUMENT EDIT PAGE ||============================== //\n\nconst DocumentEdit = () => {\n  const params = useParams();\n  const navigate = useNavigate();\n\n  const { data: document, isLoading } = useDocument(params.id === 'new' ? undefined : params.id);\n  const { mutate: saveDocument } = useSaveDocument();\n  const { mutate: updateDocument } = useUpdateDocument();\n  const { mutate: deleteDocument } = useDeleteDocument();\n\n  const { data: companies = [] } = useCompanies();\n  const { data: contacts = [] } = useContacts();\n  const { data: assignments = [] } = useAssignments();\n  const { data: references = [], isLoading: referencesIsLoading } = useDocumentReferences(\n    params.id !== 'new' ? { document: { equals: params.id } } : undefined\n  );\n  const { mutate: createDocumentReference } = useCreateDocumentReference();\n  const { mutate: updateDocumentReference } = useUpdateDocumentReference();\n  const { mutate: deleteDocumentReference } = useDeleteDocumentReference();\n  const companyMap = useMemo(() => toMap(companies, 'id'), [companies]);\n  const contactMap = useMemo(() => toMap(contacts, 'id'), [contacts]);\n  const assignmentMap = useMemo(() => toMap(assignments, 'id'), [assignments]);\n\n  const handleSubmit = (data: Media) => {\n    if (document) {\n      updateDocument({ ...data, id: document.id });\n    } else {\n      saveDocument(data, {\n        onSuccess: (res) => navigate(`/documents/${res.doc.id}`)\n      });\n    }\n  };\n\n  if (isLoading) return;\n\n  const renderType = (entityType: string) => {\n    switch (entityType) {\n      case 'company':\n        return 'Bolag';\n      case 'contact':\n        return 'Kontakt';\n      case 'assignment':\n        return 'Uppdrag';\n      default:\n        return null;\n    }\n  };\n\n  const renderLink = (entityType: string, entityId: string) => {\n    switch (entityType) {\n      case 'company':\n        return (\n          <Link component={RouterLink} to={`/home/companies/${entityId}`}>\n            {companyMap.get(entityId)?.companyName}\n          </Link>\n        );\n      case 'contact':\n        return (\n          <Link component={RouterLink} to={`/home/contacts/${entityId}`}>\n            {contactMap.get(entityId)?.contactName}\n          </Link>\n        );\n      case 'assignment':\n        return (\n          <Link\n            component={RouterLink}\n            to={{\n              pathname: `/home/assignments/${entityId}`,\n              search: `${createSearchParams({ tab: 'documents' })}`\n            }}\n          >\n            {assignmentMap.get(entityId)?.assignmentName}\n          </Link>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <DocumentForm\n      formProps={{ defaultValues: { ...document } }}\n      onSubmit={handleSubmit}\n      renderTopContent={() => (\n        <Box sx={{ position: 'relative', mt: 1, mb: 3 }}>\n          <Typography variant=\"h4\" color=\"primary\">\n            {document ? 'Redigera dokument' : 'L채gg till dokument'}\n          </Typography>\n\n          <FormActionButtons\n            sx={{ position: 'absolute', top: 0, right: 0 }}\n            onDelete={document ? () => deleteDocument(document, { onSuccess: () => navigate('..') }) : undefined}\n            onCancel={() => navigate(-1)}\n          />\n        </Box>\n      )}\n      renderBottomContent={() =>\n        document && (\n          <FlexGrow>\n            <ContentTabs\n              tabs={[\n                {\n                  id: 'references',\n                  label: 'Referenser',\n                  content: (\n                    <DataTable\n                      data={references}\n                      getRowId={(row) => `${row.document}-${row.entityType}-${row.entityId}`}\n                      state={{ isLoading: referencesIsLoading }}\n                      columns={[\n                        {\n                          accessorKey: 'entityType',\n                          header: 'Typ',\n                          enableEditing: false,\n                          Cell: ({ row }) => renderType(row.original.entityType)\n                        },\n                        {\n                          accessorKey: 'entityId',\n                          header: 'L채nk',\n                          enableEditing: false,\n                          Cell: ({ row }) => renderLink(row.original.entityType, row.original.entityId)\n                        }\n                      ]}\n                      renderEditRowDialogContent={({ row, table }) => (\n                        <SebraDialog\n                          table={table}\n                          row={row}\n                          titles={{ creating: 'Ny referens', editing: 'Redigera referens' }}\n                          FormComponent={DocumentReferenceForm}\n                          defaultValues={{ document }}\n                        />\n                      )}\n                      onCreate={(row) => createDocumentReference(row)}\n                      onUpdate={(row) => updateDocumentReference(row)}\n                      onDelete={(row) => deleteDocumentReference(row)}\n                    />\n                  )\n                }\n              ]}\n            />\n          </FlexGrow>\n        )\n      }\n    />\n  );\n};\n\nexport default DocumentEdit;\n"],"names":["ENTITY_TYPES","DocumentReferenceForm","formProps","props","contacts","useContacts","assignments","useAssignments","companies","useCompanies","control","handleSubmit","watch","errors","useForm","fields","entityOptions","useMemo","company","contact","assignment","jsx","SebraForm","Grid","jsxs","FormControl","InputLabel","Controller","field","Select","MenuItem","type","Autocomplete","option","entity","_","value","params","TextField","DocumentEdit","useParams","navigate","useNavigate","document","isLoading","useDocument","saveDocument","useSaveDocument","updateDocument","useUpdateDocument","deleteDocument","useDeleteDocument","references","referencesIsLoading","useDocumentReferences","createDocumentReference","useCreateDocumentReference","updateDocumentReference","useUpdateDocumentReference","deleteDocumentReference","useDeleteDocumentReference","companyMap","toMap","contactMap","assignmentMap","data","res","renderType","entityType","renderLink","entityId","Link","RouterLink","_a","_b","createSearchParams","_c","DocumentForm","Box","Typography","FormActionButtons","FlexGrow","ContentTabs","DataTable","row","table","SebraDialog"],"mappings":"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"}