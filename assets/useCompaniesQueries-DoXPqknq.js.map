{"version":3,"file":"useCompaniesQueries-DoXPqknq.js","sources":["../../src/features/companies/api/companiesGQL.ts","../../src/features/companies/api/companiesLocal.ts","../../src/features/companies/hooks/useCompaniesQueries.ts"],"sourcesContent":["import { graphql } from '@/api/gql';\nimport {\n  Company,\n  CreateCompanyMutation,\n  DeleteCompanyMutation,\n  GetCompaniesQuery,\n  GetCompanyQuery,\n  GetCompanyQueryVariables,\n  UpdateCompanyMutation\n} from '@/api/gql/graphql';\nimport { requestGQL } from '@/hooks/useGraphQL';\nimport { pick } from '@/utils';\n\nexport const getCompaniesGQL = (): Promise<GetCompaniesQuery> =>\n  requestGQL(\n    graphql(`\n      query GetCompanies {\n        Companies(sort: \"companyName\") {\n          docs {\n            id\n            companyName\n            address\n            industry\n            phone\n            email\n            website\n            organizationNumber\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    `)\n  )();\n\nexport const getCompanyGQL = (data: GetCompanyQueryVariables): Promise<GetCompanyQuery> =>\n  requestGQL(\n    graphql(`\n      query GetCompany($id: String!) {\n        Company(id: $id) {\n          id\n          companyName\n          address\n          industry\n          phone\n          email\n          website\n          organizationNumber\n          createdAt\n          updatedAt\n        }\n      }\n    `)\n  )({ id: data.id });\n\nexport const createCompanyGQL = (data: Company): Promise<CreateCompanyMutation> =>\n  requestGQL(\n    graphql(`\n      mutation CreateCompany($data: mutationCompanyInput!) {\n        createCompany(data: $data) {\n          id\n        }\n      }\n    `)\n  )({\n    data: pick(data, ['companyName', 'address', 'industry', 'phone', 'email', 'website', 'organizationNumber'])\n  });\n\nexport const updateCompanyGQL = ({ id, ...data }: Company): Promise<UpdateCompanyMutation> =>\n  requestGQL(\n    graphql(`\n      mutation UpdateCompany($id: String!, $data: mutationCompanyUpdateInput!) {\n        updateCompany(id: $id, data: $data) {\n          id\n        }\n      }\n    `)\n  )({\n    id,\n    data: pick(data, ['companyName', 'address', 'industry', 'phone', 'email', 'website', 'organizationNumber'])\n  });\n\nexport const deleteCompanyGQL = ({ id }: Company): Promise<DeleteCompanyMutation> =>\n  requestGQL(\n    graphql(`\n      mutation DeleteCompany($id: String!) {\n        deleteCompany(id: $id) {\n          id\n        }\n      }\n    `)\n  )({ id });\n","import { v4 as uuidv4 } from 'uuid';\n\nimport { deleteQuery, insertQuery, query, selectOneQuery, updateQuery } from '@/api/DummyDB';\nimport {\n  Company,\n  CreateCompanyMutation,\n  DeleteCompanyMutation,\n  GetCompaniesQuery,\n  GetCompanyQuery,\n  GetCompanyQueryVariables,\n  UpdateCompanyMutation\n} from '@/api/gql/graphql';\nimport { AssertKeys, pick } from '@/utils';\n\ntype LocalCompany = {\n  id: string;\n  companyName: string;\n  address?: string;\n  industry?: string;\n  email?: string;\n  phone?: string;\n  website?: string;\n  organizationNumber?: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport const verify: AssertKeys<LocalCompany, Omit<Company, '__typename'>> = true;\n\nexport const getCompaniesLocal = async (): Promise<GetCompaniesQuery> => {\n  const docs = await query<Company>(`SELECT * FROM companies ORDER BY company_name`);\n  return { Companies: { docs } };\n};\n\nexport const getCompanyLocal = async ({ id }: GetCompanyQueryVariables): Promise<GetCompanyQuery> => {\n  return { Company: await selectOneQuery<Company>('companies', { id }) };\n};\n\nexport const createCompanyLocal = async (data: Company): Promise<CreateCompanyMutation> => {\n  const params = pick({ ...data, id: uuidv4() }, [\n    'id',\n    'companyName',\n    'address',\n    'industry',\n    'phone',\n    'email',\n    'website',\n    'organizationNumber'\n  ]);\n  return { createCompany: await insertQuery('companies', params) };\n};\n\nexport const updateCompanyLocal = async ({ id, ...data }: Company): Promise<UpdateCompanyMutation> => {\n  const params = pick(data, ['companyName', 'address', 'industry', 'phone', 'email', 'website', 'organizationNumber']);\n  return { updateCompany: await updateQuery<Company>('companies', params, { id }) };\n};\n\nexport const deleteCompanyLocal = async ({ id }: Company): Promise<DeleteCompanyMutation> => {\n  return { deleteCompany: await deleteQuery<Company>('companies', { id }) };\n};\n","import { useQuery, UseQueryResult } from '@tanstack/react-query';\n\nimport { Company } from '@/api/gql/graphql';\nimport { useAppStore } from '@/store';\nimport { getCompaniesGQL, getCompanyGQL } from '../api/companiesGQL';\nimport { getCompaniesLocal, getCompanyLocal } from '../api/companiesLocal';\n\nexport const useCompanies = (): UseQueryResult<Company[], Error> => {\n  const [{ isDemo }] = useAppStore();\n  const fn = isDemo ? getCompaniesLocal : getCompaniesGQL;\n\n  return useQuery({\n    queryKey: ['companies'],\n    queryFn: () => fn(),\n    select: (data) => data.Companies?.docs?.filter((i) => !!i) || []\n  });\n};\n\nexport const useCompany = (companyId: string | undefined): UseQueryResult<Company, Error> => {\n  const [{ isDemo }] = useAppStore();\n  const fn = isDemo ? getCompanyLocal : getCompanyGQL;\n\n  return useQuery({\n    queryKey: ['company', companyId],\n    queryFn: () => fn({ id: companyId! }),\n    select: (data) => data.Company!,\n    enabled: !!companyId\n  });\n};\n"],"names":["getCompaniesGQL","requestGQL","graphql","getCompanyGQL","data","createCompanyGQL","pick","updateCompanyGQL","id","deleteCompanyGQL","getCompaniesLocal","query","getCompanyLocal","selectOneQuery","createCompanyLocal","params","uuidv4","insertQuery","updateCompanyLocal","updateQuery","deleteCompanyLocal","deleteQuery","useCompanies","isDemo","useAppStore","fn","useQuery","_b","_a","i","useCompany","companyId"],"mappings":"waAaO,MAAMA,EAAkB,IAC7BC,EACEC,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAiBP,CACH,IAEWC,EAAiBC,GAC5BH,EACEC,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAeP,CACH,EAAE,CAAE,GAAIE,EAAK,EAAI,CAAA,EAENC,EAAoBD,GAC/BH,EACEC,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMP,CACH,EAAE,CACA,KAAMI,EAAKF,EAAM,CAAC,cAAe,UAAW,WAAY,QAAS,QAAS,UAAW,oBAAoB,CAAC,CAC5G,CAAC,EAEUG,EAAmB,CAAC,CAAE,GAAAC,EAAI,GAAGJ,CACxC,IAAAH,EACEC,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMP,CACH,EAAE,CACA,GAAAM,EACA,KAAMF,EAAKF,EAAM,CAAC,cAAe,UAAW,WAAY,QAAS,QAAS,UAAW,oBAAoB,CAAC,CAC5G,CAAC,EAEUK,EAAmB,CAAC,CAAE,GAAAD,CAAA,IACjCP,EACEC,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMP,CACH,EAAE,CAAE,GAAAM,CAAI,CAAA,EC9DGE,EAAoB,UAExB,CAAE,UAAW,CAAE,KADT,MAAMC,EAAe,+CAA+C,CAC3D,IAGXC,EAAkB,MAAO,CAAE,GAAAJ,MAC/B,CAAE,QAAS,MAAMK,EAAwB,YAAa,CAAE,GAAAL,CAAI,CAAA,IAGxDM,EAAqB,MAAOV,GAAkD,CACnF,MAAAW,EAAST,EAAK,CAAE,GAAGF,EAAM,GAAIY,EAAA,GAAY,CAC7C,KACA,cACA,UACA,WACA,QACA,QACA,UACA,oBAAA,CACD,EACD,MAAO,CAAE,cAAe,MAAMC,EAAY,YAAaF,CAAM,CAAE,CACjE,EAEaG,EAAqB,MAAO,CAAE,GAAAV,EAAI,GAAGJ,KAAoD,CAC9F,MAAAW,EAAST,EAAKF,EAAM,CAAC,cAAe,UAAW,WAAY,QAAS,QAAS,UAAW,oBAAoB,CAAC,EAC5G,MAAA,CAAE,cAAe,MAAMe,EAAqB,YAAaJ,EAAQ,CAAE,GAAAP,CAAI,CAAA,EAChF,EAEaY,EAAqB,MAAO,CAAE,GAAAZ,MAClC,CAAE,cAAe,MAAMa,EAAqB,YAAa,CAAE,GAAAb,CAAI,CAAA,ICnD3Dc,EAAe,IAAwC,CAClE,KAAM,CAAC,CAAE,OAAAC,EAAQ,EAAIC,EAAY,EAC3BC,EAAKF,EAASb,EAAoBV,EAExC,OAAO0B,EAAS,CACd,SAAU,CAAC,WAAW,EACtB,QAAS,IAAMD,EAAG,EAClB,OAASrB,YAAS,QAAAuB,GAAAC,EAAAxB,EAAK,YAAL,YAAAwB,EAAgB,OAAhB,YAAAD,EAAsB,OAAQE,GAAM,CAAC,CAACA,KAAM,CAAC,EAAA,CAChE,CACH,EAEaC,EAAcC,GAAkE,CAC3F,KAAM,CAAC,CAAE,OAAAR,EAAQ,EAAIC,EAAY,EAC3BC,EAAKF,EAASX,EAAkBT,EAEtC,OAAOuB,EAAS,CACd,SAAU,CAAC,UAAWK,CAAS,EAC/B,QAAS,IAAMN,EAAG,CAAE,GAAIM,EAAY,EACpC,OAAS3B,GAASA,EAAK,QACvB,QAAS,CAAC,CAAC2B,CAAA,CACZ,CACH"}