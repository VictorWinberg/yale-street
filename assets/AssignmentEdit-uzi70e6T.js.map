{"version":3,"file":"AssignmentEdit-uzi70e6T.js","sources":["../../src/features/documents/components/DocumentReferenceTable.tsx","../../src/features/assignments/components/AssignmentEdit.tsx"],"sourcesContent":["import { useMemo } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport { Link } from '@mui/material';\n\n// third party\nimport dayjs, { Dayjs } from 'dayjs';\n\n// project imports\nimport { DocumentReference, DocumentReference_Where, Media } from '@/api/gql/graphql';\nimport DataTable from '@/ui-component/DataTable';\nimport SebraDialog from '@/ui-component/SebraDialog';\nimport { formatDate, toLocalTime } from '@/utils';\nimport {\n  useCreateDocumentReference,\n  useDeleteDocumentReference,\n  useSaveDocument,\n  useUpdateDocument\n} from '../hooks/useDocumentsMutations';\nimport { useDocumentReferences } from '../hooks/useDocumentsQueries';\nimport DocumentForm from './DocumentForm';\n\ninterface DocumentReferenceTableProps {\n  defaultValues: Omit<DocumentReference, 'id' | 'document'>;\n  where: DocumentReference_Where;\n}\n\nconst DocumentReferenceTable = ({ defaultValues, where }: DocumentReferenceTableProps) => {\n  const { data: references = [], isLoading } = useDocumentReferences(where);\n  const documents = useMemo(() => references.map((ref) => ref.document), [references]);\n\n  const { mutate: saveDocument } = useSaveDocument();\n  const { mutate: updateDocument } = useUpdateDocument();\n  const { mutate: createDocumentReference } = useCreateDocumentReference();\n  const { mutate: deleteDocumentReference } = useDeleteDocumentReference();\n\n  if (isLoading) return;\n\n  return (\n    <DataTable<Media & { upload?: File }>\n      data={documents}\n      getRowId={(row) => row.id}\n      state={{ isLoading: isLoading }}\n      columns={[\n        {\n          accessorKey: 'alt',\n          header: 'Dokumentnamn',\n          Cell: ({ cell, row }) => (\n            <Link component={RouterLink} to={`/documents/${row.original.id}`}>\n              {cell.getValue<string>()}\n            </Link>\n          )\n        },\n        { accessorKey: 'mimeType', header: 'Filtyp', enableEditing: false },\n        {\n          accessorKey: 'updatedAt',\n          accessorFn: (row) => dayjs(row.updatedAt),\n          header: 'Senast uppdaterad',\n          filterVariant: 'date-range',\n          enableEditing: false,\n          Cell: ({ cell }) => formatDate(toLocalTime(cell.getValue<Dayjs>()))\n        }\n      ]}\n      renderEditRowDialogContent={({ row, table }) => (\n        <SebraDialog\n          table={table}\n          row={row}\n          titles={{ creating: 'Nytt dokument', editing: 'Redigera dokument' }}\n          FormComponent={DocumentForm}\n        />\n      )}\n      onCreate={(row) => {\n        if (row.upload) {\n          saveDocument(row, {\n            onSuccess: (res) => createDocumentReference({ ...defaultValues, document: res.doc })\n          });\n        } else {\n          createDocumentReference({ ...defaultValues, document: row });\n        }\n      }}\n      onUpdate={(row) => updateDocument(row)}\n      onDelete={(row) => deleteDocumentReference(references.find((ref) => ref.document.id === row.id)!)}\n    />\n  );\n};\n\nexport default DocumentReferenceTable;\n","import { useMemo } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\n// material-ui\nimport { Box, Typography } from '@mui/material';\n\n// project imports\nimport { Assignment } from '@/api/gql/graphql';\nimport DocumentReferenceTable from '@/features/documents/components/DocumentReferenceTable';\nimport InteractionTable from '@/features/interactions/components/InteractionTable';\nimport { useInteractions } from '@/features/interactions/hooks/useInteractionsQueries';\nimport { headerHeight } from '@/store/constant';\nimport ContentTabs from '@/ui-component/ContentTabs';\nimport FlexGrow from '@/ui-component/extended/FlexGrow';\nimport { FormActionButtons } from '@/ui-component/SebraForm';\nimport { formatDate, intersection } from '@/utils';\nimport { useCreateAssignment, useDeleteAssignment, useUpdateAssignment } from '../hooks/useAssignmentsMutations';\nimport { useAssignment } from '../hooks/useAssignmentsQueries';\nimport AssignmentForm from './AssignmentForm';\n\n// ==============================|| ASSIGNMENT EDIT PAGE ||============================== //\n\nconst AssignmentEdit = () => {\n  const params = useParams();\n  const navigate = useNavigate();\n\n  const { data: assignment, isLoading } = useAssignment(params.id === 'new' ? undefined : params.id);\n  const { mutate: createAssignment } = useCreateAssignment();\n  const { mutate: updateAssignment } = useUpdateAssignment();\n  const { mutate: deleteAssignment } = useDeleteAssignment();\n\n  const { data: allInteractions = [], isLoading: interactionsIsLoading } = useInteractions();\n  const interactions = useMemo(\n    () =>\n      allInteractions.filter(\n        (interaction) =>\n          intersection(interaction.contacts || [], assignment?.responsibleContacts || [], 'id').length > 0\n      ),\n    [allInteractions, assignment]\n  );\n\n  const handleSubmit = (data: Assignment) => {\n    if (assignment) {\n      updateAssignment({ ...data, id: assignment.id });\n    } else {\n      createAssignment(data, {\n        onSuccess: ({ createAssignment }) => navigate(`/home/assignments/${createAssignment?.id || ''}`)\n      });\n    }\n  };\n\n  if (isLoading) return;\n\n  return (\n    <AssignmentForm\n      formProps={{ values: assignment }}\n      onSubmit={handleSubmit}\n      renderTopContent={() => (\n        <Box sx={{ position: 'relative', mt: 1, mb: 3 }}>\n          <Typography variant=\"h4\" color=\"primary\">\n            {assignment ? 'Redigera uppdrag' : 'LÃ¤gg till uppdrag'}\n          </Typography>\n\n          <FormActionButtons\n            sx={{ position: 'absolute', top: 0, right: 0 }}\n            onDelete={assignment ? () => deleteAssignment(assignment, { onSuccess: () => navigate('..') }) : undefined}\n            onCancel={() => navigate(-1)}\n          />\n        </Box>\n      )}\n      renderBottomContent={() =>\n        assignment && (\n          <FlexGrow sx={{ mt: 1, minHeight: `calc(100vh - ${headerHeight}px - 1rem)` }}>\n            <ContentTabs\n              tabs={[\n                {\n                  id: 'interactions',\n                  label: 'Interaktioner',\n                  content: (\n                    <InteractionTable\n                      interactions={interactions}\n                      isLoading={interactionsIsLoading}\n                      defaultValues={{\n                        contacts: [...(assignment.responsibleContacts || []), assignment.externalContact].filter(\n                          (c) => !!c\n                        ),\n                        interactionDate: formatDate()\n                      }}\n                    />\n                  )\n                },\n                {\n                  id: 'documents',\n                  label: 'Dokument',\n                  content: (\n                    <DocumentReferenceTable\n                      defaultValues={{ entityId: assignment.id, entityType: 'assignment' }}\n                      where={{ entityId: { equals: assignment.id }, entityType: { equals: 'assignment' } }}\n                    />\n                  )\n                }\n              ]}\n            />\n          </FlexGrow>\n        )\n      }\n    />\n  );\n};\n\nexport default AssignmentEdit;\n"],"names":["DocumentReferenceTable","defaultValues","where","references","isLoading","useDocumentReferences","documents","useMemo","ref","saveDocument","useSaveDocument","updateDocument","useUpdateDocument","createDocumentReference","useCreateDocumentReference","deleteDocumentReference","useDeleteDocumentReference","jsx","DataTable","row","cell","Link","RouterLink","dayjs","formatDate","toLocalTime","table","SebraDialog","DocumentForm","res","AssignmentEdit","params","useParams","navigate","useNavigate","assignment","useAssignment","createAssignment","useCreateAssignment","updateAssignment","useUpdateAssignment","deleteAssignment","useDeleteAssignment","allInteractions","interactionsIsLoading","useInteractions","interactions","interaction","intersection","handleSubmit","data","AssignmentForm","jsxs","Box","Typography","FormActionButtons","FlexGrow","headerHeight","ContentTabs","InteractionTable","c"],"mappings":"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"}