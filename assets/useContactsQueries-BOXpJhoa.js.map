{"version":3,"file":"useContactsQueries-BOXpJhoa.js","sources":["../../src/features/contacts/api/contactsLocal.ts","../../src/features/contacts/api/contactsGQL.ts","../../src/features/contacts/hooks/useContactsQueries.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nimport { deleteQuery, insertQuery, query, selectOneQuery, updateQuery } from '@/api/DummyDB';\nimport {\n  Company,\n  Contact,\n  CreateContactMutation,\n  DeleteContactMutation,\n  GetContactQuery,\n  GetContactQueryVariables,\n  GetContactsQuery,\n  UpdateContactMutation\n} from '@/api/gql/graphql';\nimport { AssertKeys, pick, toMap } from '@/utils';\n\ntype LocalContact = {\n  id: string;\n  contactName: string;\n  email: string;\n  phone: string;\n  jobTitle: string;\n  company?: Company;\n  address: string;\n  notes: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport const verify: AssertKeys<LocalContact, Omit<Contact, '__typename'>> = true;\n\ntype FlatContact = Omit<Contact, 'company'> & { company?: string };\n\nexport const getContactsLocal = async (): Promise<GetContactsQuery> => {\n  const contacts = await query<FlatContact>(`SELECT * FROM contacts ORDER BY contact_name`);\n  const companies = toMap(await query<Company>(`SELECT * FROM companies`), 'id');\n  const docs = contacts.map((contact) => ({ ...contact, company: companies.get(contact.company || '') }));\n  return { Contacts: { docs } };\n};\n\nexport const getContactLocal = async ({ id }: GetContactQueryVariables): Promise<GetContactQuery> => {\n  const contact = await selectOneQuery<FlatContact>('contacts', { id });\n  const company = await selectOneQuery<Company>('companies', { id: contact.company });\n  return { Contact: { ...contact, company } };\n};\n\nexport const createContactLocal = async (data: Contact): Promise<CreateContactMutation> => {\n  const params = pick({ ...data, id: uuidv4(), company: data.company?.id }, [\n    'id',\n    'contactName',\n    'email',\n    'phone',\n    'jobTitle',\n    'company',\n    'address',\n    'notes'\n  ]);\n  return { createContact: await insertQuery<FlatContact>('contacts', params) };\n};\n\nexport const updateContactLocal = async ({ id, ...data }: Contact): Promise<UpdateContactMutation> => {\n  const params = pick({ ...data, company: data.company?.id }, [\n    'contactName',\n    'email',\n    'phone',\n    'jobTitle',\n    'company',\n    'address',\n    'notes'\n  ]);\n  return { updateContact: await updateQuery<FlatContact>('contacts', params, { id }) };\n};\n\nexport const deleteContactLocal = async ({ id }: Contact): Promise<DeleteContactMutation> => {\n  return { deleteContact: await deleteQuery<FlatContact>('contacts', { id }) };\n};\n","import { graphql } from '@/api/gql';\nimport {\n  Contact,\n  CreateContactMutation,\n  DeleteContactMutation,\n  GetContactQuery,\n  GetContactQueryVariables,\n  GetContactsQuery,\n  UpdateContactMutation\n} from '@/api/gql/graphql';\nimport { requestGQL } from '@/hooks/useGraphQL';\nimport { pick } from '@/utils';\n\nexport const getContactsGQL = (): Promise<GetContactsQuery> =>\n  requestGQL(\n    graphql(`\n      query GetContacts {\n        Contacts(sort: \"contactName\") {\n          docs {\n            id\n            contactName\n            email\n            phone\n            jobTitle\n            address\n            notes\n            createdAt\n            updatedAt\n\n            company {\n              id\n              companyName\n              address\n              industry\n              phone\n              email\n              website\n              organizationNumber\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n    `)\n  )();\n\nexport const getContactGQL = ({ id }: GetContactQueryVariables): Promise<GetContactQuery> =>\n  requestGQL(\n    graphql(`\n      query GetContact($id: String!) {\n        Contact(id: $id) {\n          id\n          contactName\n          email\n          phone\n          jobTitle\n          address\n          notes\n          createdAt\n          updatedAt\n\n          company {\n            id\n            companyName\n            address\n            industry\n            phone\n            email\n            website\n            organizationNumber\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    `)\n  )({ id });\n\nexport const createContactGQL = (data: Contact): Promise<CreateContactMutation> =>\n  requestGQL(\n    graphql(`\n      mutation CreateContact($data: mutationContactInput!) {\n        createContact(data: $data) {\n          id\n        }\n      }\n    `)\n  )({\n    data: {\n      ...pick(data, ['contactName', 'email', 'phone', 'jobTitle', 'address', 'notes']),\n      company: data.company?.id ?? null\n    }\n  });\n\nexport const updateContactGQL = (data: Contact): Promise<UpdateContactMutation> =>\n  requestGQL(\n    graphql(`\n      mutation UpdateContact($id: String!, $data: mutationContactUpdateInput!) {\n        updateContact(id: $id, data: $data) {\n          id\n        }\n      }\n    `)\n  )({\n    id: data.id,\n    data: {\n      ...pick(data, ['contactName', 'email', 'phone', 'jobTitle', 'address', 'notes']),\n      company: data.company?.id ?? null\n    }\n  });\n\nexport const deleteContactGQL = (data: Contact): Promise<DeleteContactMutation> =>\n  requestGQL(\n    graphql(`\n      mutation DeleteContact($id: String!) {\n        deleteContact(id: $id) {\n          id\n        }\n      }\n    `)\n  )({ id: data.id });\n","import { useQuery, UseQueryResult } from '@tanstack/react-query';\n\nimport { getContactLocal, getContactsLocal } from '../api/contactsLocal';\nimport { useAppStore } from '@/store';\nimport { getContactGQL, getContactsGQL } from '../api/contactsGQL';\nimport { Contact } from '@/api/gql/graphql';\n\nexport const useContacts = (): UseQueryResult<Contact[], Error> => {\n  const [{ isDemo }] = useAppStore();\n  const fn = isDemo ? getContactsLocal : getContactsGQL;\n  return useQuery({\n    queryKey: ['contacts'],\n    queryFn: () => fn(),\n    select: (data) => data.Contacts?.docs?.filter((i) => !!i) || []\n  });\n};\n\nexport const useContact = (contactId: string | undefined): UseQueryResult<Contact, Error> => {\n  const [{ isDemo }] = useAppStore();\n  const fn = isDemo ? getContactLocal : getContactGQL;\n\n  return useQuery({\n    queryKey: ['contact', contactId],\n    queryFn: () => fn({ id: contactId! }),\n    select: (data) => data.Contact!,\n    enabled: !!contactId\n  });\n};\n"],"names":["getContactsLocal","contacts","query","companies","toMap","contact","getContactLocal","id","selectOneQuery","company","createContactLocal","data","params","pick","uuidv4","_a","insertQuery","updateContactLocal","updateQuery","deleteContactLocal","deleteQuery","getContactsGQL","requestGQL","graphql","getContactGQL","createContactGQL","updateContactGQL","deleteContactGQL","useContacts","isDemo","useAppStore","fn","useQuery","_b","i","useContact","contactId"],"mappings":"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"}