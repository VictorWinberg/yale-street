{"version":3,"file":"useInteractionsQueries-DrTL-pAf.js","sources":["../../src/features/interactions/api/interactionsLocal.ts","../../src/features/interactions/api/interactionsGQL.ts","../../src/features/interactions/hooks/useInteractionsMutations.ts","../../src/features/interactions/components/InteractionForm.tsx","../../src/features/interactions/components/InteractionTable.tsx","../../src/features/interactions/hooks/useInteractionsQueries.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nimport { deleteQuery, insertManyQuery, insertQuery, query, updateQuery } from '@/api/DummyDB';\nimport { AssertKeys, pick, toMap } from '@/utils';\nimport {\n  Contact,\n  CreateInteractionMutation,\n  DeleteInteractionMutation,\n  GetInteractionsQuery,\n  Interaction,\n  UpdateInteractionMutation\n} from '@/api/gql/graphql';\n\ntype LocalInteraction = {\n  id: string;\n  interactionDate: string;\n  interactionType: string;\n  notes: string;\n  createdAt: string;\n  updatedAt: string;\n  contacts: Contact[];\n};\n\ntype InteractionContact = {\n  interactionId: string;\n  contactId: string;\n};\n\nexport const verify: AssertKeys<LocalInteraction, Omit<Interaction, '__typename'>> = true;\n\ntype FlatInteraction = Omit<Interaction, 'contacts'>;\n\nexport const getInteractionsLocal = async (): Promise<GetInteractionsQuery> => {\n  const interactionRecords = await query<FlatInteraction>(`SELECT * FROM interactions`);\n  const interactions: Interaction[] = interactionRecords.map((interaction) => ({ ...interaction, contacts: [] }));\n  const interactionMap = toMap(interactions, 'id');\n\n  const contacts = await query<Contact>(`SELECT * FROM contacts`);\n  const contactMap = toMap(contacts, 'id');\n\n  const interactionContacts = await query<InteractionContact>('SELECT * FROM interaction_contacts');\n  interactionContacts.forEach((interactionContact) => {\n    const interaction = interactionMap.get(interactionContact.interactionId);\n    const contact = contactMap.get(interactionContact.contactId);\n    if (!interaction || !contact) {\n      return;\n    }\n    (interaction.contacts = interaction.contacts || []).push(contact);\n  });\n\n  const docs = Array.from(interactionMap.values());\n\n  return { Interactions: { docs } };\n};\n\nexport const createInteractionLocal = async (data: Interaction): Promise<CreateInteractionMutation> => {\n  const interaction = await insertQuery<FlatInteraction>(\n    'interactions',\n    pick({ ...data, interactionId: uuidv4() }, ['id', 'interactionType', 'interactionDate', 'notes'])\n  );\n  await createInteractionContacts({ id: interaction.id, contacts: data.contacts });\n\n  return { createInteraction: interaction };\n};\n\nexport const updateInteractionLocal = async (data: Interaction): Promise<UpdateInteractionMutation> => {\n  const interaction = await updateQuery<FlatInteraction>(\n    'interactions',\n    pick(data, ['interactionType', 'interactionDate', 'notes']),\n    pick(data, ['id'])\n  );\n  await updateInteractionContacts(data);\n\n  return { updateInteraction: interaction };\n};\n\nexport const deleteInteractionLocal = async ({ id }: Pick<Interaction, 'id'>): Promise<DeleteInteractionMutation> => {\n  await deleteInteractionContacts({ id });\n  await deleteQuery<FlatInteraction>('interactions', { id });\n  return { deleteInteraction: { id } };\n};\n\nconst createInteractionContacts = async (interaction: Pick<Interaction, 'id' | 'contacts'>) => {\n  await insertManyQuery<InteractionContact>(\n    'interaction_contacts',\n    (interaction.contacts || []).map(({ id: contactId }) => ({ interactionId: interaction.id, contactId }))\n  );\n};\n\nconst updateInteractionContacts = async (interaction: Pick<Interaction, 'id' | 'contacts'>) => {\n  await deleteInteractionContacts(interaction);\n  await createInteractionContacts(interaction);\n};\n\nconst deleteInteractionContacts = async ({ id }: Pick<Interaction, 'id'>) => {\n  await deleteQuery<InteractionContact>('interaction_contacts', { interactionId: id });\n};\n","import { graphql } from '@/api/gql';\nimport {\n  Interaction,\n  CreateInteractionMutation,\n  DeleteInteractionMutation,\n  GetInteractionQuery,\n  GetInteractionQueryVariables,\n  GetInteractionsQuery,\n  UpdateInteractionMutation\n} from '@/api/gql/graphql';\nimport { requestGQL } from '@/hooks/useGraphQL';\nimport { pick } from '@/utils';\n\nexport const getInteractionsGQL = (): Promise<GetInteractionsQuery> =>\n  requestGQL(\n    graphql(`\n      query GetInteractions {\n        Interactions(sort: \"interactionDate:desc\") {\n          docs {\n            id\n            interactionType\n            interactionDate\n            notes\n            createdAt\n            updatedAt\n\n            contacts {\n              id\n              contactName\n              email\n              phone\n              jobTitle\n              address\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n    `)\n  )();\n\nexport const getInteractionGQL = ({ id }: GetInteractionQueryVariables): Promise<GetInteractionQuery> =>\n  requestGQL(\n    graphql(`\n      query GetInteraction($id: String!) {\n        Interaction(id: $id) {\n          id\n          interactionType\n          interactionDate\n          notes\n          createdAt\n          updatedAt\n\n          contacts {\n            id\n            contactName\n            email\n            phone\n            jobTitle\n            address\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    `)\n  )({ id });\n\nexport const createInteractionGQL = (data: Interaction): Promise<CreateInteractionMutation> =>\n  requestGQL(\n    graphql(`\n      mutation CreateInteraction($data: mutationInteractionInput!) {\n        createInteraction(data: $data) {\n          id\n        }\n      }\n    `)\n  )({\n    data: pick({ ...data, contacts: data.contacts?.map((c) => c.id) }, [\n      'interactionType',\n      'interactionDate',\n      'notes',\n      'contacts'\n    ])\n  });\n\nexport const updateInteractionGQL = (data: Interaction): Promise<UpdateInteractionMutation> =>\n  requestGQL(\n    graphql(`\n      mutation UpdateInteraction($id: String!, $data: mutationInteractionUpdateInput!) {\n        updateInteraction(id: $id, data: $data) {\n          id\n        }\n      }\n    `)\n  )({\n    id: data.id,\n    data: pick({ ...data, contacts: data.contacts?.map((c) => c.id) }, [\n      'interactionType',\n      'interactionDate',\n      'notes',\n      'contacts'\n    ])\n  });\n\nexport const deleteInteractionGQL = (data: Interaction): Promise<DeleteInteractionMutation> =>\n  requestGQL(\n    graphql(`\n      mutation DeleteInteraction($id: String!) {\n        deleteInteraction(id: $id) {\n          id\n        }\n      }\n    `)\n  )({ id: data.id });\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\n\nimport { useSnackbar } from '@/hooks/useSnackbar';\nimport { createInteractionLocal, deleteInteractionLocal, updateInteractionLocal } from '../api/interactionsLocal';\nimport { useAppStore } from '@/store';\nimport { createInteractionGQL, deleteInteractionGQL, updateInteractionGQL } from '../api/interactionsGQL';\n\nexport const useCreateInteraction = () => {\n  const [{ isDemo }] = useAppStore();\n  const queryClient = useQueryClient();\n  const { showSnackbar } = useSnackbar();\n\n  return useMutation({\n    mutationFn: isDemo ? createInteractionLocal : createInteractionGQL,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['interactions'] });\n      showSnackbar('Interaktion sparat!');\n    },\n    onError: () => {\n      showSnackbar('Ett fel uppstod när interaktionen skulle sparas.', 'error');\n    }\n  });\n};\n\nexport const useUpdateInteraction = () => {\n  const [{ isDemo }] = useAppStore();\n  const queryClient = useQueryClient();\n  const { showSnackbar } = useSnackbar();\n\n  return useMutation({\n    mutationFn: isDemo ? updateInteractionLocal : updateInteractionGQL,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['interactions'] });\n      showSnackbar('Interaktion uppdaterat!');\n    },\n    onError: () => {\n      showSnackbar('Ett fel uppstod när interaktionen skulle uppdateras.', 'error');\n    }\n  });\n};\n\nexport const useDeleteInteraction = () => {\n  const [{ isDemo }] = useAppStore();\n  const queryClient = useQueryClient();\n  const { showSnackbar } = useSnackbar();\n\n  return useMutation({\n    mutationFn: isDemo ? deleteInteractionLocal : deleteInteractionGQL,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['interactions'] });\n      showSnackbar('Interaktion borttaget!');\n    },\n    onError: () => {\n      showSnackbar('Ett fel uppstod när interaktionen skulle tas bort.', 'error');\n    }\n  });\n};\n","// material-ui\nimport { Autocomplete, Chip, Grid, TextField } from '@mui/material';\nimport { DateTimePicker } from '@mui/x-date-pickers';\n\n// third party\nimport dayjs from 'dayjs';\nimport { Controller, useForm } from 'react-hook-form';\n\n// project imports\nimport { Interaction } from '@/api/gql/graphql';\nimport { useContacts } from '@/features/contacts/hooks/useContactsQueries';\nimport SebraForm, { FormProps } from '@/ui-component/SebraForm';\nimport { formatDate } from '@/utils';\n\n// ==============================|| INTERACTIONS FORM ||============================== //\n\nconst InteractionForm = ({ formProps, ...props }: FormProps<Interaction>) => {\n  const { data: contacts = [] } = useContacts();\n\n  const {\n    control,\n    handleSubmit,\n    register,\n    formState: { errors }\n  } = useForm<Interaction>(formProps);\n\n  return (\n    <SebraForm {...props} handleSubmit={handleSubmit}>\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={6}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Typ av interaktion\"\n                type=\"text\"\n                margin=\"none\"\n                {...register('interactionType', { required: true })}\n                error={!!errors.interactionType}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                multiline\n                fullWidth\n                minRows={4}\n                label=\"Noteringar\"\n                type=\"text\"\n                margin=\"none\"\n                {...register('notes')}\n                error={!!errors.notes}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <Controller\n                control={control}\n                name=\"interactionDate\"\n                rules={{ required: true }}\n                render={({ field }) => {\n                  return (\n                    <DateTimePicker\n                      label=\"Interaktionsdatum\"\n                      value={dayjs(field.value)}\n                      inputRef={field.ref}\n                      onChange={(date) => field.onChange(formatDate(date))}\n                    />\n                  );\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Controller\n                name=\"contacts\"\n                control={control}\n                render={({ field }) => (\n                  <Autocomplete\n                    multiple\n                    disableCloseOnSelect\n                    id=\"multiple-contacts\"\n                    options={contacts}\n                    getOptionKey={(option) => option.id}\n                    getOptionLabel={(option) => option.contactName}\n                    isOptionEqualToValue={(option, value) => option.id === value.id}\n                    value={field.value || []}\n                    onChange={(_, value) => field.onChange(value)}\n                    renderInput={(params) => (\n                      <TextField {...params} label=\"Kontakter\" variant=\"outlined\" fullWidth error={!!errors.contacts} />\n                    )}\n                    renderTags={(tags, getTagProps) => {\n                      return tags.map((option, index) => (\n                        <Chip {...getTagProps({ index })} key={option.id} label={option.contactName} />\n                      ));\n                    }}\n                  />\n                )}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </SebraForm>\n  );\n};\n\nexport default InteractionForm;\n","import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport { Avatar, Chip, List, ListItem } from '@mui/material';\n\n// third party\nimport dayjs, { Dayjs } from 'dayjs';\n\n// project imports\nimport { Contact, Interaction } from '@/api/gql/graphql';\nimport DataTable from '@/ui-component/DataTable';\nimport SebraDialog from '@/ui-component/SebraDialog';\nimport { formatDate, stringAvatar, toLocalTime } from '@/utils';\nimport { useCreateInteraction, useDeleteInteraction, useUpdateInteraction } from '../hooks/useInteractionsMutations';\nimport InteractionForm from './InteractionForm';\n\ninterface InteractionTableProps {\n  interactions: Interaction[];\n  isLoading: boolean;\n  defaultValues: Partial<Interaction>;\n}\n\nconst InteractionTable = ({ interactions, isLoading, defaultValues }: InteractionTableProps) => {\n  const { mutate: createInteraction } = useCreateInteraction();\n  const { mutate: updateInteraction } = useUpdateInteraction();\n  const { mutate: deleteInteraction } = useDeleteInteraction();\n\n  return (\n    <DataTable\n      data={interactions}\n      getRowId={(row) => row.id}\n      state={{ isLoading }}\n      columns={[\n        {\n          accessorKey: 'interactionType',\n          header: 'Typ',\n          filterVariant: 'multi-select'\n        },\n        {\n          accessorKey: 'contacts',\n          header: 'Kontakter',\n          minSize: 150,\n          enableEditing: false,\n          Cell: ({ cell }) => (\n            <List disablePadding>\n              {cell.getValue<Contact[]>().map((contact) => (\n                <ListItem key={contact.id} sx={{ py: 0.25 }} disableGutters>\n                  <Chip\n                    component={RouterLink}\n                    variant=\"outlined\"\n                    avatar={<Avatar {...stringAvatar(contact.contactName)} />}\n                    label={contact.contactName}\n                    to={`/home/contacts/${contact.id}`}\n                    clickable\n                    size=\"small\"\n                  />\n                </ListItem>\n              ))}\n            </List>\n          )\n        },\n        {\n          accessorKey: 'notes',\n          header: 'Noteringar'\n        },\n        {\n          accessorFn: (row) => dayjs(row.interactionDate),\n          header: 'Interaktionsdatum',\n          filterVariant: 'date-range',\n          enableEditing: false,\n          Cell: ({ cell }) => formatDate(toLocalTime(cell.getValue<Dayjs>()))\n        }\n      ]}\n      renderEditRowDialogContent={({ row, table }) => (\n        <SebraDialog\n          table={table}\n          row={row}\n          titles={{ creating: 'Ny interaktion', editing: 'Redigera interaktion' }}\n          FormComponent={InteractionForm}\n          defaultValues={defaultValues}\n        />\n      )}\n      onCreate={(row) => createInteraction(row)}\n      onUpdate={(row) => updateInteraction(row)}\n      onDelete={(row) => deleteInteraction(row)}\n    />\n  );\n};\n\nexport default InteractionTable;\n","// third party\nimport { useQuery } from '@tanstack/react-query';\n\n// project imports\nimport { getInteractionsLocal } from '../api/interactionsLocal';\nimport { useAppStore } from '@/store';\nimport { getInteractionsGQL } from '../api/interactionsGQL';\n\nexport const useInteractions = () => {\n  const [{ isDemo }] = useAppStore();\n  const fn = isDemo ? getInteractionsLocal : getInteractionsGQL;\n  return useQuery({\n    queryKey: ['interactions'],\n    queryFn: () => fn(),\n    select: (data) => data.Interactions?.docs?.filter((i) => !!i) || []\n  });\n};\n"],"names":["getInteractionsLocal","interactions","query","interaction","interactionMap","toMap","contacts","contactMap","interactionContact","contact","createInteractionLocal","data","insertQuery","pick","uuidv4","createInteractionContacts","updateInteractionLocal","updateQuery","updateInteractionContacts","deleteInteractionLocal","id","deleteInteractionContacts","deleteQuery","insertManyQuery","contactId","getInteractionsGQL","requestGQL","graphql","createInteractionGQL","_a","c","updateInteractionGQL","deleteInteractionGQL","useCreateInteraction","isDemo","useAppStore","queryClient","useQueryClient","showSnackbar","useSnackbar","useMutation","useUpdateInteraction","useDeleteInteraction","InteractionForm","formProps","props","useContacts","control","handleSubmit","register","errors","useForm","jsx","SebraForm","Grid","jsxs","TextField","Controller","field","DateTimePicker","dayjs","date","formatDate","Autocomplete","option","value","_","params","tags","getTagProps","index","createElement","Chip","InteractionTable","isLoading","defaultValues","createInteraction","updateInteraction","deleteInteraction","DataTable","row","cell","List","ListItem","RouterLink","Avatar","stringAvatar","toLocalTime","table","SebraDialog","useInteractions","fn","useQuery","_b","i"],"mappings":"gzBAgCO,MAAMA,EAAuB,SAA2C,CAEvE,MAAAC,GADqB,MAAMC,EAAuB,4BAA4B,GAC7B,IAAKC,IAAiB,CAAE,GAAGA,EAAa,SAAU,EAAK,EAAA,EACxGC,EAAiBC,EAAMJ,EAAc,IAAI,EAEzCK,EAAW,MAAMJ,EAAe,wBAAwB,EACxDK,EAAaF,EAAMC,EAAU,IAAI,EAGnB,OADQ,MAAMJ,EAA0B,oCAAoC,GAC5E,QAASM,GAAuB,CAClD,MAAML,EAAcC,EAAe,IAAII,EAAmB,aAAa,EACjEC,EAAUF,EAAW,IAAIC,EAAmB,SAAS,EACvD,CAACL,GAAe,CAACM,IAGpBN,EAAY,SAAWA,EAAY,UAAY,IAAI,KAAKM,CAAO,CAAA,CACjE,EAIM,CAAE,aAAc,CAAE,KAFZ,MAAM,KAAKL,EAAe,OAAQ,CAAA,CAEtB,EAC3B,EAEaM,EAAyB,MAAOC,GAA0D,CACrG,MAAMR,EAAc,MAAMS,EACxB,eACAC,EAAK,CAAE,GAAGF,EAAM,cAAeG,EAAA,GAAY,CAAC,KAAM,kBAAmB,kBAAmB,OAAO,CAAC,CAAA,EAE5F,aAAAC,EAA0B,CAAE,GAAIZ,EAAY,GAAI,SAAUQ,EAAK,SAAU,EAExE,CAAE,kBAAmBR,EAC9B,EAEaa,EAAyB,MAAOL,GAA0D,CACrG,MAAMR,EAAc,MAAMc,EACxB,eACAJ,EAAKF,EAAM,CAAC,kBAAmB,kBAAmB,OAAO,CAAC,EAC1DE,EAAKF,EAAM,CAAC,IAAI,CAAC,CAAA,EAEnB,aAAMO,GAA0BP,CAAI,EAE7B,CAAE,kBAAmBR,EAC9B,EAEagB,EAAyB,MAAO,CAAE,GAAAC,MACvC,MAAAC,EAA0B,CAAE,GAAAD,CAAA,CAAI,EACtC,MAAME,EAA6B,eAAgB,CAAE,GAAAF,CAAI,CAAA,EAClD,CAAE,kBAAmB,CAAE,GAAAA,CAAA,IAG1BL,EAA4B,MAAOZ,GAAsD,CACvF,MAAAoB,EACJ,wBACCpB,EAAY,UAAY,CAAC,GAAG,IAAI,CAAC,CAAE,GAAIqB,MAAiB,CAAE,cAAerB,EAAY,GAAI,UAAAqB,CAAY,EAAA,CAAA,CAE1G,EAEMN,GAA4B,MAAOf,GAAsD,CAC7F,MAAMkB,EAA0BlB,CAAW,EAC3C,MAAMY,EAA0BZ,CAAW,CAC7C,EAEMkB,EAA4B,MAAO,CAAE,GAAAD,KAAkC,CAC3E,MAAME,EAAgC,uBAAwB,CAAE,cAAeF,CAAI,CAAA,CACrF,ECnFaK,GAAqB,IAChCC,EACEC,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAwBP,CACH,IA6BWC,GAAwBjB,UACnC,OAAAe,EACEC,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMP,CACH,EAAE,CACA,KAAMd,EAAK,CAAE,GAAGF,EAAM,UAAUkB,EAAAlB,EAAK,WAAL,YAAAkB,EAAe,IAAKC,GAAMA,EAAE,KAAO,CACjE,kBACA,kBACA,QACA,UAAA,CACD,CACH,CAAC,GAEUC,GAAwBpB,UACnC,OAAAe,EACEC,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMP,CACH,EAAE,CACA,GAAIhB,EAAK,GACT,KAAME,EAAK,CAAE,GAAGF,EAAM,UAAUkB,EAAAlB,EAAK,WAAL,YAAAkB,EAAe,IAAKC,GAAMA,EAAE,KAAO,CACjE,kBACA,kBACA,QACA,UAAA,CACD,CACH,CAAC,GAEUE,GAAwBrB,GACnCe,EACEC,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMP,CACH,EAAE,CAAE,GAAIhB,EAAK,GAAI,EC5GNsB,GAAuB,IAAM,CACxC,KAAM,CAAC,CAAE,OAAAC,EAAQ,EAAIC,EAAY,EAC3BC,EAAcC,IACd,CAAE,aAAAC,GAAiBC,IAEzB,OAAOC,EAAY,CACjB,WAAYN,EAASxB,EAAyBkB,GAC9C,UAAW,IAAM,CACfQ,EAAY,kBAAkB,CAAE,SAAU,CAAC,cAAc,CAAG,CAAA,EAC5DE,EAAa,qBAAqB,CACpC,EACA,QAAS,IAAM,CACbA,EAAa,mDAAoD,OAAO,CAC1E,CAAA,CACD,CACH,EAEaG,GAAuB,IAAM,CACxC,KAAM,CAAC,CAAE,OAAAP,EAAQ,EAAIC,EAAY,EAC3BC,EAAcC,IACd,CAAE,aAAAC,GAAiBC,IAEzB,OAAOC,EAAY,CACjB,WAAYN,EAASlB,EAAyBe,GAC9C,UAAW,IAAM,CACfK,EAAY,kBAAkB,CAAE,SAAU,CAAC,cAAc,CAAG,CAAA,EAC5DE,EAAa,yBAAyB,CACxC,EACA,QAAS,IAAM,CACbA,EAAa,uDAAwD,OAAO,CAC9E,CAAA,CACD,CACH,EAEaI,GAAuB,IAAM,CACxC,KAAM,CAAC,CAAE,OAAAR,EAAQ,EAAIC,EAAY,EAC3BC,EAAcC,IACd,CAAE,aAAAC,GAAiBC,IAEzB,OAAOC,EAAY,CACjB,WAAYN,EAASf,EAAyBa,GAC9C,UAAW,IAAM,CACfI,EAAY,kBAAkB,CAAE,SAAU,CAAC,cAAc,CAAG,CAAA,EAC5DE,EAAa,wBAAwB,CACvC,EACA,QAAS,IAAM,CACbA,EAAa,qDAAsD,OAAO,CAC5E,CAAA,CACD,CACH,ECxCMK,GAAkB,CAAC,CAAE,UAAAC,EAAW,GAAGC,KAAoC,CAC3E,KAAM,CAAE,KAAMvC,EAAW,CAAA,GAAOwC,EAAY,EAEtC,CACJ,QAAAC,EACA,aAAAC,EACA,SAAAC,EACA,UAAW,CAAE,OAAAC,CAAO,CAAA,EAClBC,EAAqBP,CAAS,EAGhC,OAAAQ,EAAA,IAACC,EAAW,CAAA,GAAGR,EAAO,aAAAG,EACpB,gBAACM,EAAK,CAAA,UAAS,GAAC,QAAS,EACvB,SAAA,CAAAF,EAAA,IAACE,EAAK,CAAA,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAC,EAAAA,KAACD,EAAK,CAAA,UAAS,GAAC,QAAS,EACvB,SAAA,CAAAF,EAAA,IAACE,EAAK,CAAA,KAAI,GAAC,GAAI,GACb,SAAAF,EAAA,IAACI,EAAA,CACC,UAAS,GACT,MAAM,qBACN,KAAK,OACL,OAAO,OACN,GAAGP,EAAS,kBAAmB,CAAE,SAAU,GAAM,EAClD,MAAO,CAAC,CAACC,EAAO,eAAA,CAAA,EAEpB,EACCE,EAAA,IAAAE,EAAA,CAAK,KAAI,GAAC,GAAI,GACb,SAAAF,EAAA,IAACI,EAAA,CACC,UAAS,GACT,UAAS,GACT,QAAS,EACT,MAAM,aACN,KAAK,OACL,OAAO,OACN,GAAGP,EAAS,OAAO,EACpB,MAAO,CAAC,CAACC,EAAO,KAAA,CAAA,EAEpB,CAAA,CAAA,CACF,CACF,CAAA,EACCE,EAAA,IAAAE,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAACC,EAAAA,KAAAD,EAAA,CAAK,UAAS,GAAC,QAAS,EACvB,SAAA,CAAAF,EAAA,IAACE,EAAK,CAAA,KAAI,GAAC,GAAI,GACb,SAAAF,EAAA,IAACK,EAAA,CACC,QAAAV,EACA,KAAK,kBACL,MAAO,CAAE,SAAU,EAAK,EACxB,OAAQ,CAAC,CAAE,MAAAW,KAEPN,EAAA,IAACO,EAAA,CACC,MAAM,oBACN,MAAOC,EAAMF,EAAM,KAAK,EACxB,SAAUA,EAAM,IAChB,SAAWG,GAASH,EAAM,SAASI,EAAWD,CAAI,CAAC,CAAA,CAAA,CAGzD,CAAA,EAEJ,EACCT,EAAA,IAAAE,EAAA,CAAK,KAAI,GAAC,GAAI,GACb,SAAAF,EAAA,IAACK,EAAA,CACC,KAAK,WACL,QAAAV,EACA,OAAQ,CAAC,CAAE,MAAAW,CAAA,IACTN,EAAA,IAACW,EAAA,CACC,SAAQ,GACR,qBAAoB,GACpB,GAAG,oBACH,QAASzD,EACT,aAAe0D,GAAWA,EAAO,GACjC,eAAiBA,GAAWA,EAAO,YACnC,qBAAsB,CAACA,EAAQC,IAAUD,EAAO,KAAOC,EAAM,GAC7D,MAAOP,EAAM,OAAS,CAAC,EACvB,SAAU,CAACQ,EAAGD,IAAUP,EAAM,SAASO,CAAK,EAC5C,YAAcE,GACXf,EAAA,IAAAI,EAAA,CAAW,GAAGW,EAAQ,MAAM,YAAY,QAAQ,WAAW,UAAS,GAAC,MAAO,CAAC,CAACjB,EAAO,SAAU,EAElG,WAAY,CAACkB,EAAMC,IACVD,EAAK,IAAI,CAACJ,EAAQM,IACvBC,gBAACC,GAAM,GAAGH,EAAY,CAAE,MAAAC,EAAO,EAAG,IAAKN,EAAO,GAAI,MAAOA,EAAO,WAAa,CAAA,CAC9E,CACH,CACF,CAAA,CAAA,EAGN,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,ECpFMS,GAAmB,CAAC,CAAE,aAAAxE,EAAc,UAAAyE,EAAW,cAAAC,KAA2C,CAC9F,KAAM,CAAE,OAAQC,CAAkB,EAAI3C,GAAqB,EACrD,CAAE,OAAQ4C,CAAkB,EAAIpC,GAAqB,EACrD,CAAE,OAAQqC,CAAkB,EAAIpC,GAAqB,EAGzD,OAAAU,EAAA,IAAC2B,EAAA,CACC,KAAM9E,EACN,SAAW+E,GAAQA,EAAI,GACvB,MAAO,CAAE,UAAAN,CAAU,EACnB,QAAS,CACP,CACE,YAAa,kBACb,OAAQ,MACR,cAAe,cACjB,EACA,CACE,YAAa,WACb,OAAQ,YACR,QAAS,IACT,cAAe,GACf,KAAM,CAAC,CAAE,KAAAO,KACN7B,MAAA8B,EAAA,CAAK,eAAc,GACjB,SAAKD,EAAA,WAAsB,IAAKxE,GAC/B2C,EAAAA,IAAC+B,EAA0B,CAAA,GAAI,CAAE,GAAI,KAAQ,eAAc,GACzD,SAAA/B,EAAA,IAACoB,EAAA,CACC,UAAWY,EACX,QAAQ,WACR,OAAShC,EAAA,IAAAiC,EAAA,CAAQ,GAAGC,EAAa7E,EAAQ,WAAW,EAAG,EACvD,MAAOA,EAAQ,YACf,GAAI,kBAAkBA,EAAQ,EAAE,GAChC,UAAS,GACT,KAAK,OAAA,CARM,CAAA,EAAAA,EAAQ,EAUvB,CACD,EACH,CAEJ,EACA,CACE,YAAa,QACb,OAAQ,YACV,EACA,CACE,WAAauE,GAAQpB,EAAMoB,EAAI,eAAe,EAC9C,OAAQ,oBACR,cAAe,aACf,cAAe,GACf,KAAM,CAAC,CAAE,KAAAC,KAAWnB,EAAWyB,EAAYN,EAAK,SAAgB,CAAC,CAAC,CACpE,CACF,EACA,2BAA4B,CAAC,CAAE,IAAAD,EAAK,MAAAQ,CAClC,IAAApC,EAAA,IAACqC,EAAA,CACC,MAAAD,EACA,IAAAR,EACA,OAAQ,CAAE,SAAU,iBAAkB,QAAS,sBAAuB,EACtE,cAAerC,GACf,cAAAgC,CAAA,CACF,EAEF,SAAWK,GAAQJ,EAAkBI,CAAG,EACxC,SAAWA,GAAQH,EAAkBG,CAAG,EACxC,SAAWA,GAAQF,EAAkBE,CAAG,CAAA,CAAA,CAG9C,EC/EaU,GAAkB,IAAM,CACnC,KAAM,CAAC,CAAE,OAAAxD,EAAQ,EAAIC,EAAY,EAC3BwD,EAAKzD,EAASlC,EAAuByB,GAC3C,OAAOmE,EAAS,CACd,SAAU,CAAC,cAAc,EACzB,QAAS,IAAMD,EAAG,EAClB,OAAShF,YAAS,QAAAkF,GAAAhE,EAAAlB,EAAK,eAAL,YAAAkB,EAAmB,OAAnB,YAAAgE,EAAyB,OAAQC,GAAM,CAAC,CAACA,KAAM,CAAC,EAAA,CACnE,CACH"}